%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: kidneylogo_CMYK_ROT.pdf
%%Creator: Adobe Acrobat 9.4.2
%%For: Matzmeier
%%CreationDate: 25.03.2011, 12:23:04
%%BoundingBox: 0 0 429 202
%%HiResBoundingBox: 0 0 428.0321 201.2591
%%CropBox: 0 0 428.0321 201.2591
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 34029 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:MetadataDate="2010-12-08T16:41:49+01:00"
   xmp:ModifyDate="2010-12-08T16:41:49+01:00"
   xmp:CreateDate="2010-11-18T14:51:36+01:00"
   xmp:CreatorTool="Adobe Illustrator CS4"
   xmpMM:InstanceID="uuid:5a0fae62-9cc3-6d48-965b-fec6ae8936d8"
   xmpMM:DocumentID="xmp.did:FD7F117407206811994CB7EC700C52B7"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="True"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 9.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">kidneylogo_sw</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="92"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAXAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXzh/zkZ5q1t/My&#xA;+XlmeDSoLeOUwISqzPJUl3pTkBTiAelD45VM7u30OMcPF1ea+V/N/mDyxqCXuj3bwMGBlhqTDKB+&#xA;zIlaMD9/hkQXLyYozFF9c+RPONj5u8t2+sWq+mz1jurcmpinQDmle43BB8CMuibdFmxHHKiyDC1O&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvKPzk/OGXyrI&#xA;uiaHwfW5EElxO4DrbI32fgOxkYb0PQb0NchKTnaXS8fqlyeP6T+d35jWGoC7k1Rr1C1ZbW5VGicV&#xA;qQAApT/YUyHEXPlpMZFU9J/PPyofMvlbTfPWnIRLb2kb3UDfa+qTD1VPziaQ19iT2yUhYtxNHk4J&#xA;GB73z3lbs3tf/OMWrzprmsaPWsE9st2FPZ4ZFjJHzE2/yGThzdf2hH0gve9au5bPR767hp6ttbyy&#xA;x8hUckQsKj5jLDydZAXIB5p+WH5s32reWtd1zzTLBDbaS0fxwoU+FlJ40LHkzMAFHjkIy73M1GmA&#xA;kBHqt/LD8wPP3nbzBc3Zt7ez8q2rsGPpkyMSP3cKyFt3FQzmlB9IxiSSuow48ca/iRP/ACsbzF/y&#xA;vD/BdIP0N/qH1v8AeD6z9vl/vz26Yb3pHgR8Hj6/tSf8xvzS8+aT+YH+GfL0NvP6iQi3ieItI8kq&#xA;1pyLqMEpG2zBpoSx8Uksm/OP80vK+p2n+MtFjj065NCFjMblVI5GKQO6Flr9k/h1wcRDP8rimPQd&#xA;2afnB+YWreV/Lul6poLQv9fmC85kLqYmiLqQKr12yUpdzj6XAJyIl0VtP/MqXVfynvPNdj6a6pZW&#xA;0n1mEglEuolHIFaj4WqGG/Q48WyDp+HKInkUP5B/MHX9d/LPWPMd8If0jYfW/Q9NCsZ9CBZU5KWN&#xA;fibffESNJzYIxyCI5GmCeXvzT/PDzFby3Gi6bbXsML+nK6QgBWIrT4pV7ZHiLkz02GPM09B8p6p+&#xA;bl/oGuNrdjBYaxCinRQ0a8JH4sWVwJG2JCiu1K98kCXFyxxCQo2OqWflN+b1z5gTV7XzMYbS/wBM&#xA;RrouimNfq0YpNyUlt4iN/n7YIy72ep0ojRj1U/yv/Mnzj5282X59KCDyzZ83p6Z9WjkiCIycqc6f&#xA;Exp298YyJKdRghjgP5z1rLHAdirsVdirsVdirsVdirsVdirsVdirsVdir4f8yazPrev6hq05rJez&#xA;yTfJWY8VFeyrQDMd6OEeGIHco6PpN5q+q2ml2Sc7q8lSGFe3JzSpPYDqT4YplIRFl9Gfnfqw8sfl&#xA;nZ+XrVy0l4sWnrIdj9Xt0HqN/suKr/ssslsKdVpI8eQyPvfM+Vu2eyf84x2E7+aNW1AKfQgsfq7t&#xA;25zzI6j7oWycObgdoH0geb3zzP8A8o3q3/MHcf8AJpsslydbi+oe98Vx3+pjSpbCN3GnGZZ541B4&#xA;GUKVQuR4AnjXKHoKF31fXv5Y3Pl248j6U/l+MQ6eIgphJDOkw/vVkO1X51qab9emXR5Oi1IkJni5&#xA;vL//AF6j/P8A6tGR/icz/kN+P5yh5v8A/Wj9K/4y2f8AxDIn6mWL/Fz8U7/5ydA/wzpBpuL1gD84&#xA;myWRq7P+opN+dP8A5KfyX/qW3/UHglyDZpf72f46sB0zVtU8nW+taBfg/UfMGlq8f8tZofVtpV+f&#xA;Lg3/ADbkbcqURMiQ/hL038of/JHeZf8At4/9QaZKP0lw9T/fR+H3sF/K3zf+ZGh6XeQeVdCXVbSW&#xA;cPcStbXE/CTgBx5QugHwitDgiSHJ1GLHIjiNPojyFq/mTVvLUF95jsRp2qu8gltRG8QCq5CHhIzs&#xA;Kr4nLYm3U54RjKomw8F/5yA8rf4f82pq9g5ht/MCSvKiGn75eK3A2/ZkEisa9ycqmN3Z6LJxQo/w&#xA;vbvyt8o2/lfyZY2SgG6uFF1fSD9qaVQT9CLRB8ssiNnXanLxzJZbkmh2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KvhS+s57K+uLKdSs9tK8MqnYh42KsPvGY70oNi0f5T8xXPlzzHYa3bKHlspQ5jPR0I&#xA;KyJXtyRiK9sILDJATiQer3v87NCvPOvkvRvMHl2N76O3BuBbxjlI0FyiksFFSWQoAyjfr4ZOW4t1&#xA;ukmMczGWzwPSfKnmTVr5bHTtNuLi6J4lFjYBfd2aioPdiBlYdnLJGIsl9W/ld5Dj8meWUsXKyajc&#xA;N6+oTLuDIRQIpoDxRdh71PfLoinSanN4kr6J/wCZEd/LuqIilnaznCqBUkmJgAAMMuTVi+oe94t+&#xA;RHlO31byj5o0nWLV44L94Y2LoUf4VYoylh1RviHvlcBdux1mQxlEjohvynu/MHkTz5d+UNWglfTr&#xA;2cQrOqOYhP0hmQ0+zKpAP0V6YxNGk6mMcsOMcwmH1K8/6Gg+s+hJ9W/3/wAG4f8AHJ4/apTrth/i&#xA;YX/g34/nJJ+a91qukfnNFrtrYSXYsltZkQI/ByidOSg5GXNt0wEsNX3oPzZ5l89/mnNp+jW3l97R&#xA;IJTIxVZCoZhw5yyuqqiKK/50xJJZY8cMNklmH5/aJcW3kTy7p1pFJcLYzRwVjRmNI7coCQK0rxwz&#xA;FAOPop3OR71P8zvIMus/lhoGs2kDNq2jadbCaNVPN7Ywp6i0pWsZ+L5csSNgU6fNw5ZRPIkqv5TW&#xA;d3F+SfmOGWCSOZ/0hwjZWVmraKBQEVNTjH6SjUn99H4fewL8t/zF8x+SNNurGDy/JerdTCcu4ljK&#xA;kKFpQI3hkRKnKz6eOQgkvbvyv/MHVPONvqEl/pJ0trJ41jqXIkEgYmnNU+zw/HLIyt1upwDHVG7Y&#xA;J/zk7ZXlz/ho28Ek3D67z9NGelfq9K0B60wZHJ7PP1fD9L2rTFZdNtFYFWWGMEHYghBkxydfPmUT&#xA;hYuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV84/n/APlxd2Ory+a9OhMmm3xB1AIK+hPsC7D+WTrX&#xA;+ateoyqcXbaLOCOE8w8byDnvr38mLO+s/wAtNEhvUMcxSWRUYEMI5Z3kjrXxRgR7ZdDk6PVkHIaZ&#xA;rknGdirsVYxa/md5Bu9WXSbfW7eS/d/SjQFuDPWgVJaemxJ2FG37ZHiDedNkAutlTXfzG8k6DfjT&#xA;9W1eG2vaAtAebsobdefBW4VBr8VNt8TIBENPOQsDZH3Hmny7A2miXUIR+mGCaYwbks7GlBGy1Bry&#xA;H34bDEYpG9uXNu98y6FZX76fdXiRXsdq9+8DV5C2jJDS7DoOJxJCI45EWBtySiy/NT8vr28gsrXW&#xA;4Jbq5kSGCJQ9WkkYKqiq9ycHGGw6bIBZDdz+aP5f2t/Lp9zrdvDdwStBNG/JeEiMUZWYjiKMPHHi&#xA;CjTZCLATLXPN3lrQrCLUNV1GG2tJ6fV5SeXqVFR6YTkz7b/CMJIDCGKUjQClp/njynqOjXOs2Wpw&#xA;zabZgm6nXkPSAFTzUgOu3iMeIJlhmDRG5Te1ure7tYbq3cSW9wiywyDoyOAysPmDhayKNFAeYPM+&#xA;geXrRbvWr6OygduKNISSzdaKqgs30DATTLHjlM1EWh9O88+UtR0e51my1OGbTbME3c45D0gBX40I&#xA;Drt4jHiDKWGYNEblBWH5o+QNQvYLGz1qCa7uXWKCIBwWdjRVFVA3ODjDKWmyAWQnd/rmk6feWVle&#xA;3KQXWou0djE1ayutCVWg/wAoYSWuMCQSOjm1vSl1ldFa5Qaq8H1pLQ15mHkU5jalOQIxtHAeHi6J&#xA;LF+Z/kCXVhpMeuWzXzP6aoC3Av04iWnpE12+1g4g2/lslXSdRa7pEuszaLHdI2q28QnmtBXmsTEA&#xA;P0pT4hhvo1mB4eLo5tb0ldZTRWuUGqSQm5S035mENx5+FKjG0cB4eLox3/lb/wCWv/V/t/uk/wCa&#xA;cHGG78pk7kw8w/mB5N8u3SWus6rDaXMg5CA8ncKehZYw5UHtXCZAMMeCcxYCKvPNvlqz0RNduNSg&#xA;TSJKelecwyPy2ATjUsdjsN8bCBikZcNboOy/MTyVe6Tdava6tDJp9jx+tzfEDFzPFeaEBxyJoNsH&#xA;EGR08wQCNyt0f8yPI+s6jDpumavDdX0/L0YED8m4KXalVA2VScRIFZ6ecRZGybWGuaRqF5e2dldJ&#xA;Pdac6x30SGpidgSFb7jhBa5QIAJ6pTq/5keRtH1T9F6lrEFvfCgeFuR4FunNlBVP9kRgMg2R085C&#xA;wNk0bzBow1W30k3cZ1G7hNzbW4NS8Ir8akbU28cNhh4cqutkpH5l+QzrP6GGtW51Dn6XpVPH1OnD&#xA;1aenyrtTl12wcQZ/l8lXWzJXRJEZHUOjgqysKgg7EEHJNLHofy78iQ3wvotBsUuQQyuIEoGFSCq0&#xA;4g79QMjwhuOonVWWRZJpdirsVSfzk7J5Q1x1JVl0+6KsOoIhbfBLk2YfrHvDEPyv8peWNR/Lny5L&#xA;faXbXEsSm4SR4lLer6jfETSprQVrkYgEORqcso5DRSryXp2n6hrH5mSX1tFcyfXpoecqK59NVkAU&#xA;EjptkQObZlkQMddzz290y+1j8vfy10+zk4XtzPqcds5NKSC5Pp/F23AFe2A8g5MZCOSZPl9zLfIv&#xA;mg+a/wA0dMur2Kl9D5flsNWt5FpS4huXEgZSP2lYNT3phBstObHwYzXLisMg8o6TpS/nL5zjWygE&#xA;drFpz2yCJKRN9XRuUYp8JrvUYQPU05ZnwY797z2+1z9Fw/mF63lmPVbS41i+gbVpTHxtpJpGjQEF&#xA;GfZiGFCN8ierlxhfB6q2G3ey+08uLYebvy00XUTHf/VNPvGY/wB5EZBFzBStQQppxPsDhA3DQclw&#xA;nIbbhAa1bwWet/m3a2sawW36NtJPQjHFObWwZm4japZ2P04nqygbjjJ7y9a8l/8AKHaD/wBs60/5&#xA;MJlkeTgZvrPvLDfO9vBefm/5FtbqNZ7b09Qk9CQck5rAWVuJ2qGRT9GRPNyMJrDIjyY35htba01v&#xA;81YbWJYIW0q1kMcYCrzaGrNxG1SSTkTzLfjJMcd95Tz8rru+ns9Atp/JKWdqllCU8wFoG5cIAUm4&#xA;hBJWUgd6iuGPuatQAL9fXkt/OW7u7PzR5FurO0a/uoby4eGzRgjSsBFRAzVArjPmF0gBjMHbb9aR&#xA;z63repfmbdXep6RLoV3F5XukitnlWVyqvIyyh0C0+JiPowEtsYRjjoHi9QQNzpOlj/nGeO9FpELx&#xA;Cky3AQCT1DqAiLchvXgePyxr0pEz+Yq9v2N+d9Yu9A/PCTzBEC1ppsNp+k1AJpaXAEEjH/VMi0/y&#xA;qYCaknDASw8Pfat+XerX+u/nRN5huFZbXVbO6fTA2x+qQyiCM07f3Rr71wxNlGeIjh4e5r8mbq9b&#xA;y9pln/gtNTspbpkl112goiPLR2KOhciIdq702xj7l1Q3J4625Mr8mafYaj+Z/wCYT39tFdtG9jDG&#xA;Z0WSkbwyBkHIH4SEWo9skBZLRmkRjhW3NhPlnyprmvflnpdxpEcN7caBrM9xFpV0R6M8YYEx/EQv&#xA;XsSBQnfIAWHJyZYxyEHbijzegfl7q3lHW73V7R/Lceh+YwEOtadNCvxrUcWBKqGStD9kb779cnGi&#xA;4ueM4gHiuPRK/wAsk0fTbjz9qs1tEqaVrN+6SrGgaKGIMWWM0+EcQRQYI9WeouQgL5gMV/J7WmtP&#xA;PNrd3N5HNL5zt7qa8hWRSYruO4kkQOAdi0Y+EH+bIwO7dqoXCgPpTLWtOuPJms+YbnzH5ai1/wAo&#xA;a5evey6lEqvPb+rJyCurbgIWoN1FejdsJFHdhCXiRAjLhkAnMkunXX5x+VpNMITTp/LzNZGIcAIW&#xA;9X0+C0+Gi0oKbYeoYCxhlfPi/UxzTra28iRW3l/z75Yt73Q0uy9n5mhjEi85HJVp6iv0Eg8R9lsH&#xA;LmG2ROT1Y5b9z3rLXVuxV2KuxV2KqF/ZQX1jcWNwC1vdRPDMAaEpIpVt/kcSExlRt5xon5aefdMO&#xA;naWnm4x+W9Mm9WGK3gEdzInIt6TtuCu56kj26UrES5k9RjNnh9RVtV/LbzXBresXvlXXo9Ns/MJ5&#xA;6nbTwCUrIQQ0kLeJ5Hw+fSiYnoiOogQBIWY8kRD+VEdpF5Nt7O+/c+VZpZpDJH8U5mYO5FG+D46+&#xA;PXDw8kfmb4rH1Iux/La2sPzKuPONnOscV5bulzZcOs7kcpFatPi41Ip1qcPDvbE6i8fAUw0fyhJp&#xA;/nfX/MrXKyJrUdqiWwQgx/V4hGSWrvXjXpjW9sJZbgI9yUwflgn6G84aZdXazJ5ovLi8jYRkegZj&#xA;zjr8XxGN6Ht0wcPNsOo3iQPpCGv/AMtfML6d5auLDW0tvMvlqFraG9aLlBNEy+nxeMkkHgAK79/Y&#xA;h4SyjqI3Kx6ZNWX5W6mdJ8ztq2rre+YfNEKw3N4IuEMSxqURUQEVAHy6D6XhU6kXGhUYojy15T/M&#xA;rSpdOt7rzRb3Oj2QjiazWyjRmhjUKEEn2gaDriAWOTLilfp3PmjvPPkjUNbv9K1rRdRGl69oxlNp&#xA;O8fqxOkyhXR1rtt3oep28DKLHDmEQYyFxKU2X5XatJpfmZ9Z1hbzX/M0At5rtIuEEKRpxjVYwVrT&#xA;udv11HC2HUi48I9MWa+XdLbSfL+maU0gmbT7SC1aUDiHMMax8qVNK8a5IONklxSJ7ylHmrydLrnm&#xA;Dy3qqXSwJoNxJcPEULGUOEooNRx+xglGy2YsvDGQ/nKeo+Rxf+ex5jmuB9UOkvpUlnxPJvUkdy3O&#xA;uw4yU6YmNlY5qhw9btiC/k55qbSovKk/mZW8mRy+obZLcLdMgk9X0i+4pz3rXr27ZHgPJyPzUL4u&#xA;H1souvy5tb7zfrOs6hKtxp+sacunS2BQhgAUJf1K/wCRtQVB+WHh3aRqCICI5g2q2XkC3sPN2max&#xA;YyJBp+maUdKhsQpLU9QuH51999qk74eHdBz3Ag8ybYx5b/LX8zPLmlx6XpPm22gsYmZ1jNikhBc8&#xA;m+JyT198iIkN2TUYpmzHf3pnrPkDzXD5n1HXvKOuRaY+srEupW1xAJV5QrxWSMnl8VK7EdzvhMT0&#xA;YQzwMRGYulqflhrWl+UNO0fy15hm07UbCZ7ma7KD07qSQ1YTICfh8BuKdQeuPDtsv5kSmTKNg/Yj&#xA;/JnkXV9M17UPMvmDVF1PXNQiS2JhiEMMcKEHio714rvQYxj1LHNmEoiMRUQl9x+V+onQPNumW+px&#xA;xy+Z9RkvRMYmpFFLIHaMgN8RIBWuPDzZDUjiia+kKurflHoxi0GTQI7bSdS0S5gn+upbqHnSEUZZ&#xA;SnFnLkA1Ynv44mKIao78W4KF1z8vvzDvp9VsrbzdTy/rDOJ4LmASzQxSCjxRHYceJ47FdvffExLK&#xA;GfGACY+oJlaflqlj5n0PVLO89O00bSjpSQFaytswEvOvGvx1+z1x4d2B1FxII5m0hu/yr896nbfo&#xA;LWvNxvvLLTiaYNDW8kVWDiMyMTQVGx5Gnh2wcJbRqcY9QjUvseq5Y4LsVdirsVdiqnc3ENtbS3Mx&#xA;4wwI0kjAFiFQciaKCTsO2KQLNMY/5Wn5G/5b5P8ApEu/+qWQ4w3/AJXJ3faHf8rT8jf8t8n/AEiX&#xA;f/VLHjC/lcnd9od/ytPyN/y3yf8ASJd/9UseML+Vyd32h3/K0/I3/LfJ/wBIl3/1Sx4wv5XJ3faH&#xA;f8rT8jf8t8n/AEiXf/VLHjC/lcnd9od/ytPyN/y3yf8ASJd/9UseML+Vyd32h3/K0/I3/LfJ/wBI&#xA;l3/1Sx4wv5XJ3faHf8rT8jf8t8n/AEiXf/VLHjC/lcnd9od/ytPyN/y3yf8ASJd/9UseML+Vyd32&#xA;h3/K0/I3/LfJ/wBIl3/1Sx4wv5XJ3faHf8rT8jf8t8n/AEiXf/VLHjC/lcnd9od/ytPyN/y3yf8A&#xA;SJd/9UseML+Vyd32h3/K0/I3/LfJ/wBIl3/1Sx4wv5XJ3faHf8rT8jf8t8n/AEiXf/VLHjC/lcnd&#xA;9od/ytPyN/y3yf8ASJd/9UseML+Vyd32h3/K0/I3/LfJ/wBIl3/1Sx4wv5XJ3faHf8rT8jf8t8n/&#xA;AEiXf/VLHjC/lcnd9od/ytPyN/y3yf8ASJd/9UseML+Vyd32hk9tcQ3NtFcwnlDOiyRsQVJVxyBo&#xA;wBGx75NoIo0qYodirsVdirsVdirsVdirsVdirsVdiqje3lvZWVxe3LcLa1jeaZ6E8UjUsxoKk0Ax&#xA;TEEmgxzT/wAxNLvLSyuzYahaw391b2lq9zB6YY3SM8UgbkVZDxoSpJBIqMjxt0tOQSLGwUW/NLyv&#xA;+j/r0Rmng+rXl43pIrFYrCZYJC3xCnJ2HDxHhg4wn8tK6932phb+dNPuPMk+hW9pezS2riG5vkgL&#xA;Wkcpj9UI8oNVPHvxpXvh4t6YHCRHisfpa8reddO8yq0un2l7HacS8F7cQGOCdVcxkxSVIPxL9k0b&#xA;2xErXLhMOZCy08/aBdXH1eFpGnGqy6JJHxXkl1EkjksOX92ywtxbv4daPEk4JD5WpXn5iaFb2+tz&#xA;xRXN4PL83o6nHbRq7oBH6jSAMy/AtGDHxBx4kjTyNchxclk/5k6Ha2Zur23vLOli2omCaICX0hOL&#xA;dV4qzfG7svEeBG+DjCRppE0K51+lTj/NHy4IY3vIrrTpG1CLSpbe8iEMkM08ZliaUFjxjZV+1XDx&#xA;hTppdKO1oy+8/eXrHSJtVunkitIL99LYso5GeOcwOQK/ZBUtX+UfRiZBjHBImh3WmttrFpcaxe6S&#xA;gf61YRQTTkgcCtyZAnE1qT+5au2G2swIAPelur+dbHTdZXSBY31/diFLif6jAZ1hilkMaNLxPIVK&#xA;nYAmgrgMqbIYTIXYHvQ8Pn+xmvb+CPTdQa3017mK61D0U+rB7RWaQB/Urvxovw9SMeNJ05objf8A&#xA;StT8x9Cns4rqxhur9Z7D9Jxx20as5hEywOKF1+NHb4h2AOPGF/LyujQ3pCy/mppMenWF+dJ1RotR&#xA;imubaNbdGkNvbrG7zlRJ/dlZ1II98HGyGlNkWNkbH5/0+4vba1sNPv8AUFuYLa6F1bQq0SRXgJia&#xA;Qs6svwgk/Dh4mPgECyQP2MnyTQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVC/jkksbiOOKO&#xA;eR4nVIJ9onJUgJJs3wt0bY7dsSmPN5dbfl/5s/wz5gsbaBdJ9WWzuvLmmi7Nwlpc20nqyvFIVHpr&#xA;I9OI7ZXwmnOOeHEDz53tzaj/ACjvtOsvNVpp3GSC90yGy0ZGYD42jH1nlX7POWNW+nBwL+aBMb79&#xA;/wBCd3vlfzA/5h2us2FlFp0Ky/7kdTgujS8tBHQQz2pQVkD/AGWrsO/SkqNtYyR8Oib8q5H3u8ie&#xA;V/MOk+ZdRu5LKLRtEuYPi0qC6NzA16ZKm4gUonpKYxQrtufbZiDa58kZRAu5d/klcH5a61beabPX&#xA;7cIpGsX15qFqHAWWF5Ll7Ob/AF1W4KHvRvbBwm7Z/mImPD/RH7VPT/y6832WnaqslxHdT6/ol5b3&#xA;8fwx8NQmZ5o+TCvq/vLqVeZ6D2piIkLLPAkf0ZD5Jn5u8ka/qjO1mIgy6LHaR+o1AbmG7huQhp+y&#xA;whI5YmJ+xjizxjz/AJ36EHd+Qde8xXE13r9lDbR6lqkM13YRzCUxWkGnzWnISUAMheUEUG2PCSyG&#xA;eMNonkP02hYvyv8ANd3olnoWo30awxTardXt6Qsxnluy0ULemaULRzytX9k++DhKTqYAmQHcnGiW&#xA;nn7StV+uzaRHfyX2n6ba30v1xIzHNZiVZX3VufL1uWEWOjXM45Crqienemd9YebLDzhdapo9lbX9&#xA;nqttawTmecwG3e1kk+IgJJzVknPQVqMJu9mEZQMAJGqtJNP8q+YLbUvMSNpAKatLqLwap9fbgI7l&#xA;WMSm0+xUtQFuorkeE7tsssSI78q2r9LXlf8ALnVdD166uI2X9GXOjmBLfkP3N7KYzOif5DPGXr0q&#xA;xwiFfJcmoEo+fF9jWsfltqWraB5b0y4/dtpmhXNhcSJKV4XckFtHF9gjmnKFqjoRhMbpENQIyke+&#xA;X2bqtv5c8wQeZLPU5NCSflZ6dE5gvzax2stuG9VRCnwyopf4QRSgp3wUb5KckTEji6npdvRsscN2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpT5vv7rT/KetX9o/p3VnYXU9u9AeMkULOhodjQjA&#xA;eTZiAMgD3vMbvUPMum2moaada1DUR6mgSRyxtELwfpCV0uY4XIVfj9P4AxoK/M5XbmiMSQaA+r3b&#xA;Mo1mXVrPyNYwWt5qNjd6jf2lm93qBhkvoUurtYnJMfKOoVvhoenvkjyaIUZkkA0OnLkhvM9lrtrc&#xA;6RoMPmO/jjktdUvHvawi4ZrVYfQR3WNeSp6pJ7t3OCTLFKJuXCOjGpPzO8zWEiPIXuzqegaabSij&#xA;imrXkbNG1AKBZKOzf6mAyIbhp4n4SPyC651Xz5qD6HHolzfzapJ5d0m8T0pIRafWJ5JBNNeibdlZ&#xA;F/ZFa4m0CMBfFVcR/AT/AMsHVtX8ya4tzd62kUV9qFrDcRS266fHGtY0VVYmX1E5VX4aVAOEblry&#xA;VGIoR5D3pObjXofKekXA1bWL2fU9dns51t5ojc+jbNexqkBkEajl6CM3I70wdGfp4yKjtH9TXmzz&#xA;d5j8s3qJHNfNph0FmuvrpR7q3uLiSZbe4kMVU5JLwjahpQ96YkkJxYozHS+L4J95VbXdc8xTzz63&#xA;dwQ6VBpZjsofS9Kb17VZ5vXDoxb1CxFQQR2OGNktWXhjHkN7+9r8rbnVtRL6jfz6xKzfWAZLqSA6&#xA;c9LhkUQIpMoZVXuAOuMF1QA2HD+lKtZ87eYNI1LTbtZZLmwi1TWl1S3+0TY20yrVR3MCMXX5YOIg&#xA;tkcMZAjrUfmjZdf1mX8lrXVlu7htRna1U3Vuyi4YSahHEwjY0Xk0bcRXDfpYcA8aq2/YkcGu+Z7q&#xA;x0aCS91eaG51TU4Et7N7ddVEFonGOK4ZuEXqJIrM2/2fHI2W0wiCTUeQ9yea7ea/ovmDRrnUb/Vb&#xA;bywYLWBLlDbysl20lHTUk4Py9RaLzTZT0yR2aoCMokADi/HJW8o6hfTa9rOoajcax9UsL7U19WSS&#xA;D9FCG3nkRUCAmbkiD+XqMRzRliOEAcO4HvY7pn5havq/kHzDML6R9Sgv7GWGSydfWjtdSuYStvGS&#xA;aB05SRfF9OAS2LdLAI5I7bUfsRei6n5o1eHRdKl1m9s7e/1bUovWrENSS2sYzwguHCFBL6iNyoDt&#xA;TEE8mM4xjZobAe7dEeb/ADR5j0MeaLCKS/1B7TR7IwalEIAtvKwuBJPL8UXEycQfgQ/Z+WEmrRix&#xA;xlwnYbl6tljgOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoXVv0d+i7z9J8P0b6En131PsehwPqcv8nh&#xA;WuAso3Yrmwfyx/yqH6g/6E4fV/r1hz5/W/V+tc1+oV9f97w5U9P9j6K5EcLk5PGv1dx7viyjzl/h&#xA;f/Dt1/ij0/0N8P1j1OfXkOHH0/j5cqceO+SlVbtOHi4vTzYbqn/Kk/8AD+nfXuP6N9W6+o8frvr+&#xA;pt9c5+n/AKR0p6vqduuQ9LkR8fiNc9u74Mnsv8C+rP8AVPq/L6nZ+pxrw+q+nN9T9Ovw/wB36vHh&#xA;vT6Mls0nxPtP7VXy9/hD6zbfobj6/wCibP6tT1f+OZV/qv2+1efX4vHEUxnx1v3n59Uu0f8AwB/i&#xA;qf8ARnr/AKZ+tXH1jh9e+r/WaN6/Kv8AovLr9PTemAVbZPxODf6fh/at1P8A5Vz/AIcsvrXL9Efp&#xA;Gf6j6H1vn9f53HrcPQ/fV5et7fRTE1Sx8TiNfVXly2/Y03/KtvqVx9Zp9X/RTfWvrn1rn+jvWevP&#xA;1/j/AL7lx/b8O2PpX97fx8uaFm/5VJ/ijTefo/pzhZ/UeP1jjSg+p+rx/depSnp+r8VOmPpZfvuE&#xA;/wA3f9qM8n/8q/8A0i3+G/X9ak1f97/q/wDefvePrfuK8/5cY8PRjm8SvV+hFp/gT9IQf3X1v1tS&#xA;9Ln6nH1aj9IcuXwU/m5beGOzH95Xy/Y1bf4F/wAFWfocP8Lc7f6nT1uHL60noUr+8/3o49fp2w7V&#xA;5KfE4/6X7P1JXq//ACq31W+t8vX/AEjc/wC83131Pr/pJ9Z4/V/ir6fHlx+Hr3rkTwtkPF6dw7uX&#xA;RDaj/wAqe/S2mfpHj+kOFt9V+sfXKceR+rfWefwVrXj9Y3x9KY+NRrl8Px8lU/8AKrfresU+scuV&#xA;/wDpjh+kvq/Kj/XeXH9zX7deP0Y+m0fvaHwrl8E01P8A5V99YP130vV+q2FePq0+rfWx9R/u/hp9&#xA;Zpx/H4cJphHxOnefnW/2Jb5g/wCVTfVLj9Len6f6Vl9Th9Z9X9Jemvren6P737FOfD4fHfE8LOHj&#xA;Xt3eXJGL/wAq0/Q+p8PR/Rf6Mtf0l6frcP0fxl+rfZ7U9T7PxeOOzH97Y77Ne/qzLJuM7FXYq7FX&#xA;Yq7FXYq7FX//2Q=="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:FC7F117407206811994CB7EC700C52B7"
    stRef:documentID="xmp.did:FC7F117407206811994CB7EC700C52B7"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:D27F11740720681191099C3B601C4548"
       stEvt:when="2008-04-17T14:19:15+05:30"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F1174072068118D4ED246B3ADB1C6"
       stEvt:when="2008-05-15T16:23:06-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F1174072068118D4ED246B3ADB1C6"
       stEvt:when="2008-05-15T17:10:45-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:EF7F117407206811A46CA4519D24356B"
       stEvt:when="2008-05-15T22:53:33-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F07F117407206811A46CA4519D24356B"
       stEvt:when="2008-05-15T23:07:07-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T10:35:43-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T10:40:59-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:26:55-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FB7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:29:01-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FC7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:29:20-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FD7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:30:54-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FE7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:31:22-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B233668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T12:23:46-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B333668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T13:27:54-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B433668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T13:46:13-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:47:57-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F87F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:51:06-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:52:22-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F117407206811B628E3BF27C8C41B"
       stEvt:when="2008-05-22T13:28:01-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FF7F117407206811B628E3BF27C8C41B"
       stEvt:when="2008-05-22T16:23:53-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:07C3BD25102DDD1181B594070CEB88D9"
       stEvt:when="2008-05-28T16:45:26-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F87F1174072068119098B097FDA39BEF"
       stEvt:when="2008-06-02T13:25:25-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811BB1DBF8F242B6F84"
       stEvt:when="2008-06-09T14:58:36-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F117407206811ACAFB8DA80854E76"
       stEvt:when="2008-06-11T14:31:27-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:0180117407206811834383CD3A8D2303"
       stEvt:when="2008-06-11T22:37:35-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:01E540664A3DDD11BD33D3EB8D3A1068"
       stEvt:when="2008-06-18T22:24:01+07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:6B6AE2A5723EDD11A6F1BABF7C5A7A51"
       stEvt:when="2008-06-19T20:30:34-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:4092E9E2EA41DD1182ECEC1AE8587645"
       stEvt:when="2008-06-24T16:20:02+02:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:E6A26685200711689FE8CB9EA85C5459"
       stEvt:when="2008-06-26T05:49:50-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F79456976A48DD1194DA8463B7D22218"
       stEvt:when="2008-07-02T12:12:23-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F117407206811B1A49BC4792F6CFA"
       stEvt:when="2008-07-21T18:23:38+05:30"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:498BDF92CE5CDD11805FF6297D832673"
       stEvt:when="2008-07-28T10:56:58-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:4A8BDF92CE5CDD11805FF6297D832673"
       stEvt:when="2008-07-28T10:57:16-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:F77F1174072068118DBB8F5DDEBEE9D6"
      stEvt:when="2008-09-29T21:06:48-07:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:F87F1174072068118DBB8F5DDEBEE9D6"
      stEvt:when="2008-09-29T21:07:22-07:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:2A40717309206811B1BE94AF60EC0B71"
      stEvt:when="2008-08-04T10:59:11+07:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:CA07664B0C206811B1BE94AF60EC0B71"
      stEvt:when="2008-08-04T10:59:23+07:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:F77F117407206811994CB7EC700C52B7"
      stEvt:when="2010-11-18T11:03:54+01:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:F87F117407206811994CB7EC700C52B7"
      stEvt:when="2010-11-18T14:08:19+01:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:F97F117407206811994CB7EC700C52B7"
      stEvt:when="2010-11-18T14:30:03+01:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:FA7F117407206811994CB7EC700C52B7"
      stEvt:when="2010-11-18T14:30:27+01:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:FB7F117407206811994CB7EC700C52B7"
      stEvt:when="2010-11-18T14:44:09+01:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:FC7F117407206811994CB7EC700C52B7"
      stEvt:when="2010-11-18T14:50:02+01:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:FD7F117407206811994CB7EC700C52B7"
      stEvt:when="2010-11-18T14:51:36+01:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="145.000107"
    stDim:h="64.999822"
    stDim:unit="Millimeters"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Standard-Farbfeldgruppe"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="Weiß"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="Schwarz"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -201.259 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 201.259 li
428.032 201.259 li
428.032 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 0 mo
428.032 0 li
428.032 201.259 li
0 201.259 li
cp
clp
122.648 78.1897 mo
117.369 78.1897 li
117.234 78.1897 117.099 78.0997 117.008 77.9637 cv
109.924 66.6387 li
109.789 66.4587 109.654 66.3237 109.518 66.3237 cv
109.382 66.3237 109.248 66.4137 109.158 66.5487 cv
107.713 68.4887 li
107.488 68.8047 107.353 69.1207 107.353 69.5717 cv
107.353 77.7387 li
107.353 78.0537 107.217 78.1897 106.902 78.1897 cv
102.615 78.1897 li
102.298 78.1897 102.164 78.0537 102.164 77.7387 cv
102.164 50.2147 li
102.164 49.8997 102.298 49.7637 102.615 49.7637 cv
106.902 49.7637 li
107.217 49.7637 107.353 49.8997 107.353 50.2147 cv
107.353 60.2317 li
107.353 60.5477 107.533 60.7737 107.759 60.7737 cv
107.894 60.7737 108.029 60.6827 108.165 60.5017 cv
116.197 49.9447 li
116.287 49.8537 116.421 49.7637 116.557 49.7637 cv
121.746 49.7637 li
122.062 49.7637 122.242 49.8997 122.242 50.1257 cv
122.242 50.2147 122.197 50.3507 122.107 50.4857 cv
113.625 60.9997 li
113.444 61.2247 113.308 61.4047 113.308 61.5857 cv
113.308 61.7207 113.398 61.8557 113.58 62.1717 cv
122.829 77.1517 li
123.009 77.4677 123.144 77.6487 123.144 77.8287 cv
123.144 78.0537 122.964 78.1897 122.648 78.1897 cv
true sop
/0 
[/DeviceCMYK] /CSA add_res
.55 1 .8 0 nzopmsc
f
132.439 78.1897 mo
128.153 78.1897 li
127.837 78.1897 127.702 78.0537 127.702 77.7387 cv
127.702 50.2147 li
127.702 49.8997 127.837 49.7637 128.153 49.7637 cv
132.439 49.7637 li
132.755 49.7637 132.89 49.8997 132.89 50.2147 cv
132.89 77.7387 li
132.89 78.0537 132.755 78.1897 132.439 78.1897 cv
f
153.195 57.7502 mo
153.195 55.9902 151.706 54.5012 149.946 54.5012 cv
144.982 54.5012 li
144.667 54.5012 144.531 54.6372 144.531 54.9522 cv
144.531 73.0012 li
144.531 73.3162 144.667 73.4522 144.982 73.4522 cv
149.946 73.4522 li
151.706 73.4522 153.195 72.0532 153.195 70.2032 cv
cp
149.946 78.1892 mo
139.794 78.1892 li
139.478 78.1892 139.342 78.0542 139.342 77.7382 cv
139.342 50.2152 li
139.342 49.8992 139.478 49.7642 139.794 49.7642 cv
149.946 49.7642 li
155.09 49.7642 158.338 53.0582 158.338 58.1562 cv
158.338 69.7972 li
158.338 74.9402 155.09 78.1892 149.946 78.1892 cv
f
182.658 78.1897 mo
178.913 78.1897 li
178.732 78.1897 178.597 78.0997 178.507 77.9637 cv
170.43 63.2547 li
170.25 62.9387 169.618 61.3147 169.482 60.9537 cv
169.303 60.9997 li
169.392 62.0817 169.573 68.5797 169.573 72.1437 cv
169.573 77.7387 li
169.573 78.0537 169.437 78.1897 169.122 78.1897 cv
164.836 78.1897 li
164.519 78.1897 164.385 78.0537 164.385 77.7387 cv
164.385 50.2147 li
164.385 49.8997 164.519 49.7637 164.836 49.7637 cv
168.625 49.7637 li
168.806 49.7637 168.941 49.8537 169.031 49.9897 cv
177.108 64.7897 li
177.289 65.1047 177.92 66.7287 178.055 67.0897 cv
178.236 67.0447 li
178.146 65.9617 177.965 59.4647 177.965 55.9007 cv
177.965 50.2147 li
177.965 49.8997 178.101 49.7637 178.417 49.7637 cv
182.658 49.7637 li
182.974 49.7637 183.109 49.8997 183.109 50.2147 cv
183.109 77.7387 li
183.109 78.0537 182.974 78.1897 182.658 78.1897 cv
f
205.985 78.1897 mo
190.057 78.1897 li
189.742 78.1897 189.606 78.0537 189.606 77.7387 cv
189.606 50.2147 li
189.606 49.8997 189.742 49.7637 190.057 49.7637 cv
205.985 49.7637 li
206.3 49.7637 206.436 49.8997 206.436 50.2147 cv
206.436 54.0497 li
206.436 54.3667 206.3 54.5017 205.985 54.5017 cv
195.246 54.5017 li
194.93 54.5017 194.795 54.6367 194.795 54.9527 cv
194.795 60.9537 li
194.795 61.2697 194.93 61.4047 195.246 61.4047 cv
204.045 61.4047 li
204.361 61.4047 204.496 61.5407 204.496 61.8557 cv
204.496 65.6917 li
204.496 66.0067 204.361 66.1427 204.045 66.1427 cv
195.246 66.1427 li
194.93 66.1427 194.795 66.2777 194.795 66.5937 cv
194.795 73.0017 li
194.795 73.3167 194.93 73.4527 195.246 73.4527 cv
205.985 73.4527 li
206.3 73.4527 206.436 73.5867 206.436 73.9037 cv
206.436 77.7387 li
206.436 78.0537 206.3 78.1897 205.985 78.1897 cv
f
231.252 50.8469 mo
223.897 64.6089 li
223.671 65.0599 223.581 65.3299 223.581 65.8719 cv
223.581 77.7389 li
223.581 78.0539 223.445 78.1899 223.129 78.1899 cv
218.844 78.1899 li
218.527 78.1899 218.392 78.0539 218.392 77.7389 cv
218.392 65.8259 li
218.392 65.3749 218.347 65.1499 218.076 64.6089 cv
210.722 50.8469 li
210.541 50.5309 210.405 50.3049 210.405 50.1249 cv
210.405 49.8999 210.587 49.7639 210.901 49.7639 cv
215.911 49.7639 li
216.091 49.7639 216.226 49.8999 216.316 50.0339 cv
220.604 58.8779 li
220.693 59.1039 220.873 59.2399 221.009 59.2399 cv
221.145 59.2399 221.324 59.1039 221.415 58.8779 cv
225.701 50.0339 li
225.791 49.8999 225.928 49.7639 226.107 49.7639 cv
231.07 49.7639 li
231.387 49.7639 231.566 49.8999 231.566 50.1249 cv
231.566 50.3049 231.387 50.5759 231.252 50.8469 cv
f
50.7495 48.2873 mo
42.6985 48.7673 36.1205 59.8783 36.7695 70.7213 cv
37.4325 81.8093 44.6705 92.1693 53.2115 91.6603 cv
57.7285 91.3883 61.7605 88.4963 61.4375 83.1333 cv
61.0075 75.9403 56.0285 72.4453 55.8505 69.4523 cv
55.6385 65.9213 60.1865 63.3243 59.6965 55.1233 cv
59.3995 50.1593 54.5285 48.0593 50.7495 48.2873 cv
f
70.2026 35.0256 mo
78.2306 34.3116 86.3806 44.3256 87.3436 55.1426 cv
88.3296 66.2096 82.7026 77.5266 74.1786 78.2846 cv
69.6736 78.6876 65.2586 76.4216 64.7846 71.0696 cv
64.1446 63.8936 68.5516 59.6966 68.2846 56.7116 cv
67.9716 53.1896 63.0916 51.2946 62.3646 43.1106 cv
61.9226 38.1546 66.4276 35.3626 70.2026 35.0256 cv
f
112.318 104.965 mo
111.496 106.022 110.234 106.843 108.063 106.843 cv
107.183 106.843 li
103.955 106.843 101.902 104.789 101.902 101.855 cv
101.902 92.7591 li
101.902 89.8241 103.955 87.7711 107.183 87.7711 cv
108.063 87.7711 li
110.146 87.7711 111.408 88.5331 112.23 89.5311 cv
112.64 90.0601 112.934 90.5871 112.934 90.7051 cv
112.934 90.8221 112.876 90.9101 112.757 90.9691 cv
111.232 91.7321 li
111.056 91.8191 110.851 91.9381 110.734 91.9381 cv
110.646 91.9381 110.557 91.8791 110.499 91.7611 cv
109.97 90.7051 109.031 90.1181 108.063 90.1181 cv
107.183 90.1181 li
105.746 90.1181 104.543 91.3211 104.543 92.7591 cv
104.543 101.855 li
104.543 103.293 105.746 104.496 107.183 104.496 cv
108.063 104.496 li
109.06 104.496 109.97 103.909 110.528 102.794 cv
110.587 102.677 110.675 102.618 110.763 102.618 cv
110.88 102.618 111.027 102.736 111.232 102.823 cv
112.787 103.615 li
112.905 103.674 112.964 103.734 112.964 103.821 cv
112.964 103.968 112.699 104.467 112.318 104.965 cv
f
124.527 92.759 mo
124.527 91.321 123.324 90.118 121.886 90.118 cv
121.006 90.118 li
119.568 90.118 118.365 91.321 118.365 92.759 cv
118.365 101.855 li
118.365 103.293 119.568 104.496 121.006 104.496 cv
121.886 104.496 li
123.324 104.496 124.527 103.293 124.527 101.855 cv
cp
121.886 106.843 mo
121.006 106.843 li
117.778 106.843 115.724 104.789 115.724 101.855 cv
115.724 92.759 li
115.724 89.824 117.778 87.771 121.006 87.771 cv
121.886 87.771 li
125.114 87.771 127.168 89.824 127.168 92.759 cv
127.168 101.855 li
127.168 104.789 125.114 106.843 121.886 106.843 cv
f
142.429 106.55 mo
140.55 106.55 li
140.433 106.55 140.345 106.491 140.286 106.404 cv
134.036 95.048 li
133.919 94.842 133.597 94.226 133.509 93.991 cv
133.391 94.021 li
133.45 94.725 133.479 98.51 133.479 100.828 cv
133.479 106.257 li
133.479 106.462 133.391 106.55 133.186 106.55 cv
131.132 106.55 li
130.926 106.55 130.838 106.462 130.838 106.257 cv
130.838 88.358 li
130.838 88.153 130.926 88.064 131.132 88.064 cv
133.009 88.064 li
133.126 88.064 133.215 88.123 133.274 88.211 cv
139.524 99.596 li
139.612 99.742 139.964 100.417 140.052 100.653 cv
140.169 100.623 li
140.111 99.918 140.081 96.133 140.081 93.816 cv
140.081 88.358 li
140.081 88.153 140.169 88.064 140.374 88.064 cv
142.429 88.064 li
142.634 88.064 142.722 88.153 142.722 88.358 cv
142.722 106.257 li
142.722 106.462 142.634 106.55 142.429 106.55 cv
f
155.958 90.4113 mo
152.583 90.4113 li
152.378 90.4113 152.29 90.4993 152.29 90.7053 cv
152.29 106.257 li
152.29 106.462 152.202 106.55 151.997 106.55 cv
149.942 106.55 li
149.737 106.55 149.649 106.462 149.649 106.257 cv
149.649 90.7053 li
149.649 90.4993 149.562 90.4113 149.356 90.4113 cv
145.981 90.4113 li
145.776 90.4113 145.688 90.3233 145.688 90.1183 cv
145.688 88.3573 li
145.688 88.1523 145.776 88.0633 145.981 88.0633 cv
155.958 88.0633 li
156.163 88.0633 156.251 88.1523 156.251 88.3573 cv
156.251 90.1183 li
156.251 90.3233 156.163 90.4113 155.958 90.4113 cv
f
168.02 93.052 mo
168.02 91.614 166.817 90.411 165.379 90.411 cv
162.152 90.411 li
161.947 90.411 161.858 90.499 161.858 90.705 cv
161.858 95.694 li
161.858 95.899 161.947 95.987 162.152 95.987 cv
165.379 95.987 li
166.817 95.987 168.02 94.783 168.02 93.346 cv
cp
170.543 106.55 mo
168.285 106.55 li
168.167 106.55 168.049 106.462 168.02 106.345 cv
165.291 98.51 li
165.261 98.393 165.173 98.334 165.056 98.334 cv
162.152 98.334 li
161.947 98.334 161.858 98.422 161.858 98.627 cv
161.858 106.257 li
161.858 106.462 161.77 106.55 161.565 106.55 cv
159.511 106.55 li
159.305 106.55 159.217 106.462 159.217 106.257 cv
159.217 88.358 li
159.217 88.153 159.305 88.064 159.511 88.064 cv
165.379 88.064 li
168.607 88.064 170.662 90.118 170.662 93.346 cv
170.662 93.639 li
170.662 95.224 169.252 97.073 168.108 97.601 cv
167.991 97.659 167.932 97.718 167.932 97.835 cv
167.932 97.923 168.049 98.217 168.167 98.539 cv
170.602 105.581 li
170.72 105.934 170.837 106.198 170.837 106.316 cv
170.837 106.462 170.749 106.55 170.543 106.55 cv
f
182.607 92.759 mo
182.607 91.321 181.404 90.118 179.965 90.118 cv
179.086 90.118 li
177.648 90.118 176.445 91.321 176.445 92.759 cv
176.445 101.855 li
176.445 103.293 177.648 104.496 179.086 104.496 cv
179.965 104.496 li
181.404 104.496 182.607 103.293 182.607 101.855 cv
cp
179.965 106.843 mo
179.086 106.843 li
175.857 106.843 173.804 104.789 173.804 101.855 cv
173.804 92.759 li
173.804 89.824 175.857 87.771 179.086 87.771 cv
179.965 87.771 li
183.193 87.771 185.248 89.824 185.248 92.759 cv
185.248 101.855 li
185.248 104.789 183.193 106.843 179.965 106.843 cv
f
199.158 106.55 mo
189.181 106.55 li
188.976 106.55 188.888 106.462 188.888 106.257 cv
188.888 88.358 li
188.888 88.153 188.976 88.064 189.181 88.064 cv
191.236 88.064 li
191.441 88.064 191.529 88.153 191.529 88.358 cv
191.529 103.909 li
191.529 104.114 191.617 104.202 191.822 104.202 cv
199.158 104.202 li
199.363 104.202 199.452 104.29 199.452 104.496 cv
199.452 106.257 li
199.452 106.462 199.363 106.55 199.158 106.55 cv
f
215.769 92.759 mo
215.769 91.321 214.566 90.118 213.128 90.118 cv
212.248 90.118 li
210.81 90.118 209.607 91.321 209.607 92.759 cv
209.607 101.855 li
209.607 103.293 210.81 104.496 212.248 104.496 cv
213.128 104.496 li
214.566 104.496 215.769 103.293 215.769 101.855 cv
cp
213.128 106.843 mo
212.248 106.843 li
209.02 106.843 206.966 104.789 206.966 101.855 cv
206.966 92.759 li
206.966 89.824 209.02 87.771 212.248 87.771 cv
213.128 87.771 li
216.356 87.771 218.41 89.824 218.41 92.759 cv
218.41 101.855 li
218.41 104.789 216.356 106.843 213.128 106.843 cv
f
232.321 90.4113 mo
224.985 90.4113 li
224.78 90.4113 224.692 90.4993 224.692 90.7053 cv
224.692 95.6933 li
224.692 95.8983 224.78 95.9863 224.985 95.9863 cv
231.001 95.9863 li
231.206 95.9863 231.294 96.0743 231.294 96.2803 cv
231.294 98.0403 li
231.294 98.2463 231.206 98.3343 231.001 98.3343 cv
224.985 98.3343 li
224.78 98.3343 224.692 98.4223 224.692 98.6273 cv
224.692 106.257 li
224.692 106.462 224.604 106.55 224.399 106.55 cv
222.344 106.55 li
222.139 106.55 222.051 106.462 222.051 106.257 cv
222.051 88.3573 li
222.051 88.1523 222.139 88.0633 222.344 88.0633 cv
232.321 88.0633 li
232.526 88.0633 232.614 88.1523 232.614 88.3573 cv
232.614 90.1183 li
232.614 90.3233 232.526 90.4113 232.321 90.4113 cv
f
252.159 106.55 mo
250.106 106.55 li
249.9 106.55 249.812 106.462 249.812 106.257 cv
249.812 98.627 li
249.812 98.422 249.723 98.334 249.518 98.334 cv
243.503 98.334 li
243.298 98.334 243.21 98.422 243.21 98.627 cv
243.21 106.257 li
243.21 106.462 243.122 106.55 242.917 106.55 cv
240.862 106.55 li
240.657 106.55 240.569 106.462 240.569 106.257 cv
240.569 88.358 li
240.569 88.153 240.657 88.064 240.862 88.064 cv
242.917 88.064 li
243.122 88.064 243.21 88.153 243.21 88.358 cv
243.21 95.694 li
243.21 95.899 243.298 95.987 243.503 95.987 cv
249.518 95.987 li
249.723 95.987 249.812 95.899 249.812 95.694 cv
249.812 88.358 li
249.812 88.153 249.9 88.064 250.106 88.064 cv
252.159 88.064 li
252.365 88.064 252.453 88.153 252.453 88.358 cv
252.453 106.257 li
252.453 106.462 252.365 106.55 252.159 106.55 cv
f
264.897 92.759 mo
264.897 91.321 263.694 90.118 262.256 90.118 cv
261.376 90.118 li
259.938 90.118 258.735 91.321 258.735 92.759 cv
258.735 101.855 li
258.735 103.293 259.938 104.496 261.376 104.496 cv
262.256 104.496 li
263.694 104.496 264.897 103.293 264.897 101.855 cv
cp
262.256 106.843 mo
261.376 106.843 li
258.148 106.843 256.094 104.789 256.094 101.855 cv
256.094 92.759 li
256.094 89.824 258.148 87.771 261.376 87.771 cv
262.256 87.771 li
265.484 87.771 267.538 89.824 267.538 92.759 cv
267.538 101.855 li
267.538 104.789 265.484 106.843 262.256 106.843 cv
f
285.44 106.55 mo
283.385 106.55 li
283.18 106.55 283.092 106.462 283.092 106.257 cv
283.092 101.151 li
283.092 98.833 283.297 95.048 283.356 94.343 cv
283.239 94.314 li
283.122 94.754 282.828 95.694 282.534 96.368 cv
279.219 103.734 li
279.161 103.851 279.072 103.909 278.955 103.909 cv
277.958 103.909 li
277.839 103.909 277.752 103.851 277.693 103.734 cv
274.377 96.368 li
274.084 95.723 273.79 94.754 273.672 94.314 cv
273.555 94.343 li
273.614 95.048 273.819 98.833 273.819 101.151 cv
273.819 106.257 li
273.819 106.462 273.731 106.55 273.526 106.55 cv
271.472 106.55 li
271.266 106.55 271.178 106.462 271.178 106.257 cv
271.178 88.358 li
271.178 88.153 271.266 88.064 271.472 88.064 cv
273.35 88.064 li
273.467 88.064 273.555 88.123 273.614 88.24 cv
278.045 98.715 li
278.163 98.98 278.338 99.567 278.397 99.889 cv
278.485 99.889 li
278.544 99.567 278.719 99.068 278.867 98.715 cv
283.297 88.24 li
283.356 88.123 283.444 88.064 283.561 88.064 cv
285.44 88.064 li
285.645 88.064 285.733 88.153 285.733 88.358 cv
285.733 106.257 li
285.733 106.462 285.645 106.55 285.44 106.55 cv
f
299.938 106.55 mo
289.961 106.55 li
289.756 106.55 289.668 106.462 289.668 106.257 cv
289.668 88.358 li
289.668 88.153 289.756 88.064 289.961 88.064 cv
299.938 88.064 li
300.143 88.064 300.231 88.153 300.231 88.358 cv
300.231 90.118 li
300.231 90.323 300.143 90.411 299.938 90.411 cv
292.602 90.411 li
292.397 90.411 292.309 90.499 292.309 90.705 cv
292.309 95.694 li
292.309 95.899 292.397 95.987 292.602 95.987 cv
298.618 95.987 li
298.823 95.987 298.911 96.074 298.911 96.28 cv
298.911 98.04 li
298.911 98.246 298.823 98.334 298.618 98.334 cv
292.602 98.334 li
292.397 98.334 292.309 98.422 292.309 98.627 cv
292.309 103.909 li
292.309 104.114 292.397 104.202 292.602 104.202 cv
299.938 104.202 li
300.143 104.202 300.231 104.29 300.231 104.496 cv
300.231 106.257 li
300.231 106.462 300.143 106.55 299.938 106.55 cv
f
312 92.759 mo
312 91.321 310.797 90.118 309.359 90.118 cv
308.479 90.118 li
307.041 90.118 305.838 91.321 305.838 92.759 cv
305.838 101.855 li
305.838 103.293 307.041 104.496 308.479 104.496 cv
309.359 104.496 li
310.797 104.496 312 103.293 312 101.855 cv
cp
309.359 106.843 mo
308.479 106.843 li
305.251 106.843 303.197 104.789 303.197 101.855 cv
303.197 92.759 li
303.197 89.824 305.251 87.771 308.479 87.771 cv
309.359 87.771 li
312.587 87.771 314.641 89.824 314.641 92.759 cv
314.641 101.855 li
314.641 104.789 312.587 106.843 309.359 106.843 cv
f
323.593 106.843 mo
322.361 106.843 li
320.013 106.843 318.693 105.905 317.93 104.701 cv
317.666 104.29 317.519 103.997 317.519 103.851 cv
317.519 103.734 317.549 103.674 317.666 103.615 cv
319.162 102.853 li
319.309 102.765 319.572 102.618 319.69 102.618 cv
319.779 102.618 319.866 102.677 319.925 102.823 cv
320.424 103.909 321.393 104.496 322.361 104.496 cv
323.593 104.496 li
325.031 104.496 326.234 103.293 326.234 101.855 cv
326.234 100.007 324.531 99.243 322.684 98.393 cv
320.395 97.365 317.842 96.192 317.842 92.759 cv
317.842 89.824 319.896 87.771 323.123 87.771 cv
323.593 87.771 li
325.94 87.771 327.261 88.739 328.053 89.912 cv
328.229 90.177 328.463 90.558 328.463 90.705 cv
328.463 90.822 328.405 90.91 328.287 90.969 cv
326.703 91.761 li
326.528 91.85 326.381 91.938 326.263 91.938 cv
326.175 91.938 326.087 91.879 326.029 91.761 cv
325.5 90.705 324.561 90.118 323.593 90.118 cv
323.123 90.118 li
321.686 90.118 320.483 91.322 320.483 92.759 cv
320.483 94.461 322.331 95.107 324.297 96.016 cv
326.498 97.014 328.875 98.364 328.875 101.855 cv
328.875 104.789 326.821 106.843 323.593 106.843 cv
f
341.407 90.4113 mo
338.032 90.4113 li
337.827 90.4113 337.739 90.4993 337.739 90.7053 cv
337.739 106.257 li
337.739 106.462 337.651 106.55 337.446 106.55 cv
335.391 106.55 li
335.186 106.55 335.098 106.462 335.098 106.257 cv
335.098 90.7053 li
335.098 90.4993 335.011 90.4113 334.805 90.4113 cv
331.43 90.4113 li
331.225 90.4113 331.137 90.3233 331.137 90.1183 cv
331.137 88.3573 li
331.137 88.1523 331.225 88.0633 331.43 88.0633 cv
341.407 88.0633 li
341.612 88.0633 341.7 88.1523 341.7 88.3573 cv
341.7 90.1183 li
341.7 90.3233 341.612 90.4113 341.407 90.4113 cv
f
349.8 99.009 mo
348.538 94.05 li
348.48 93.816 348.244 92.993 348.186 92.759 cv
348.069 92.759 li
348.01 92.993 347.776 93.874 347.717 94.079 cv
346.455 98.892 li
346.367 99.243 346.25 99.537 346.25 99.684 cv
346.25 99.83 346.367 99.947 346.572 99.947 cv
349.654 99.947 li
349.86 99.947 349.977 99.83 349.977 99.684 cv
349.977 99.567 349.889 99.331 349.8 99.009 cv
354.377 106.55 mo
352.177 106.55 li
352.03 106.55 351.912 106.491 351.883 106.345 cv
350.798 102.471 li
350.769 102.324 350.651 102.295 350.504 102.295 cv
345.75 102.295 li
345.604 102.295 345.487 102.324 345.457 102.471 cv
344.371 106.345 li
344.342 106.491 344.225 106.55 344.078 106.55 cv
341.877 106.55 li
341.672 106.55 341.555 106.462 341.555 106.316 cv
341.555 106.197 341.701 105.758 341.848 105.318 cv
347.042 88.27 li
347.071 88.123 347.189 88.064 347.336 88.064 cv
348.92 88.064 li
349.067 88.064 349.184 88.123 349.213 88.27 cv
354.436 105.405 li
354.554 105.758 354.7 106.197 354.7 106.316 cv
354.7 106.462 354.583 106.55 354.377 106.55 cv
f
362.655 106.843 mo
361.423 106.843 li
359.075 106.843 357.755 105.905 356.993 104.701 cv
356.728 104.29 356.581 103.997 356.581 103.851 cv
356.581 103.734 356.611 103.674 356.728 103.615 cv
358.225 102.853 li
358.372 102.765 358.635 102.618 358.753 102.618 cv
358.841 102.618 358.928 102.677 358.987 102.823 cv
359.487 103.909 360.455 104.496 361.423 104.496 cv
362.655 104.496 li
364.093 104.496 365.296 103.293 365.296 101.855 cv
365.296 100.007 363.594 99.243 361.746 98.393 cv
359.458 97.365 356.905 96.192 356.905 92.759 cv
356.905 89.824 358.958 87.771 362.186 87.771 cv
362.655 87.771 li
365.003 87.771 366.323 88.739 367.116 89.912 cv
367.292 90.177 367.526 90.558 367.526 90.705 cv
367.526 90.822 367.468 90.91 367.35 90.969 cv
365.766 91.761 li
365.59 91.85 365.443 91.938 365.325 91.938 cv
365.237 91.938 365.149 91.879 365.091 91.761 cv
364.563 90.705 363.624 90.118 362.655 90.118 cv
362.186 90.118 li
360.749 90.118 359.546 91.322 359.546 92.759 cv
359.546 94.461 361.393 95.107 363.36 96.016 cv
365.56 97.014 367.937 98.364 367.937 101.855 cv
367.937 104.789 365.884 106.843 362.655 106.843 cv
f
373.573 106.55 mo
371.52 106.55 li
371.313 106.55 371.225 106.462 371.225 106.257 cv
371.225 88.358 li
371.225 88.153 371.313 88.064 371.52 88.064 cv
373.573 88.064 li
373.778 88.064 373.866 88.153 373.866 88.358 cv
373.866 106.257 li
373.866 106.462 373.778 106.55 373.573 106.55 cv
f
383.168 106.843 mo
381.936 106.843 li
379.588 106.843 378.268 105.905 377.506 104.701 cv
377.242 104.29 377.094 103.997 377.094 103.851 cv
377.094 103.734 377.125 103.674 377.242 103.615 cv
378.738 102.853 li
378.885 102.765 379.148 102.618 379.266 102.618 cv
379.354 102.618 379.441 102.677 379.5 102.823 cv
380 103.909 380.969 104.496 381.936 104.496 cv
383.168 104.496 li
384.606 104.496 385.809 103.293 385.809 101.855 cv
385.809 100.007 384.107 99.243 382.26 98.393 cv
379.971 97.365 377.418 96.192 377.418 92.759 cv
377.418 89.824 379.471 87.771 382.699 87.771 cv
383.168 87.771 li
385.516 87.771 386.836 88.739 387.629 89.912 cv
387.805 90.177 388.039 90.558 388.039 90.705 cv
388.039 90.822 387.981 90.91 387.863 90.969 cv
386.279 91.761 li
386.104 91.85 385.957 91.938 385.838 91.938 cv
385.75 91.938 385.662 91.879 385.604 91.761 cv
385.076 90.705 384.137 90.118 383.168 90.118 cv
382.699 90.118 li
381.262 90.118 380.059 91.322 380.059 92.759 cv
380.059 94.461 381.906 95.107 383.873 96.016 cv
386.074 97.014 388.451 98.364 388.451 101.855 cv
388.451 104.789 386.397 106.843 383.168 106.843 cv
f
105.013 141.357 mo
104.273 141.357 li
103.376 141.357 102.757 141.133 102.309 140.772 cv
101.982 140.513 101.74 140.186 101.55 139.824 cv
101.499 139.721 101.517 139.634 101.619 139.583 cv
102.515 139.118 li
102.618 139.066 102.704 139.1 102.757 139.204 cv
103.101 139.841 103.687 140.169 104.273 140.169 cv
105.013 140.169 li
105.944 140.169 106.719 139.428 106.719 138.48 cv
106.719 137.326 105.667 136.827 104.514 136.31 cv
103.187 135.707 101.689 135.035 101.689 133.037 cv
101.689 131.382 102.911 130.16 104.738 130.16 cv
105.013 130.16 li
106.03 130.16 106.719 130.47 107.184 130.918 cv
107.425 131.142 107.597 131.4 107.752 131.675 cv
107.804 131.779 107.77 131.865 107.666 131.917 cv
106.753 132.365 li
106.667 132.417 106.599 132.382 106.546 132.295 cv
106.185 131.675 105.599 131.348 105.013 131.348 cv
104.738 131.348 li
103.704 131.348 103.05 132.038 103.05 133.037 cv
103.05 134.07 104.169 134.536 105.392 135.086 cv
106.685 135.672 108.063 136.448 108.063 138.48 cv
108.063 140.169 106.891 141.357 105.013 141.357 cv
f
118.587 141.047 mo
118.57 141.133 118.501 141.185 118.415 141.185 cv
117.64 141.185 li
117.554 141.185 117.485 141.151 117.468 141.065 cv
115.556 134.535 li
115.452 134.173 115.384 133.777 115.366 133.605 cv
115.331 133.605 li
115.315 133.777 115.228 134.173 115.125 134.535 cv
113.195 141.065 li
113.179 141.151 113.109 141.185 113.023 141.185 cv
112.248 141.185 li
112.161 141.185 112.093 141.133 112.075 141.047 cv
109.802 130.538 li
109.767 130.401 109.836 130.331 109.974 130.331 cv
111.094 130.331 li
111.18 130.331 111.249 130.383 111.267 130.47 cv
112.61 137.498 li
112.696 137.963 112.765 138.359 112.782 138.618 cv
112.816 138.618 li
112.851 138.359 112.937 137.981 113.058 137.516 cv
115.005 130.418 li
115.022 130.331 115.091 130.297 115.177 130.297 cv
115.573 130.297 li
115.659 130.297 115.728 130.331 115.745 130.418 cv
117.691 137.395 li
117.795 137.791 117.882 138.188 117.933 138.567 cv
117.968 138.567 li
118.019 138.136 118.088 137.653 118.14 137.377 cv
119.415 130.47 li
119.432 130.383 119.501 130.331 119.587 130.331 cv
120.706 130.331 li
120.845 130.331 120.913 130.401 120.878 130.538 cv
cp
f
124.271 141.185 mo
123.273 141.185 li
123.152 141.185 123.1 141.133 123.1 141.013 cv
123.1 130.504 li
123.1 130.383 123.152 130.331 123.273 130.331 cv
124.271 130.331 li
124.392 130.331 124.444 130.383 124.444 130.504 cv
124.444 141.013 li
124.444 141.133 124.392 141.185 124.271 141.185 cv
f
130.422 141.357 mo
129.681 141.357 li
128.785 141.357 128.165 141.133 127.718 140.772 cv
127.39 140.513 127.149 140.186 126.959 139.824 cv
126.907 139.721 126.925 139.634 127.028 139.583 cv
127.924 139.118 li
128.027 139.066 128.113 139.1 128.165 139.204 cv
128.51 139.841 129.095 140.169 129.681 140.169 cv
130.422 140.169 li
131.353 140.169 132.128 139.428 132.128 138.48 cv
132.128 137.326 131.076 136.827 129.923 136.31 cv
128.596 135.707 127.097 135.035 127.097 133.037 cv
127.097 131.382 128.319 130.16 130.146 130.16 cv
130.422 130.16 li
131.439 130.16 132.128 130.47 132.593 130.918 cv
132.833 131.142 133.006 131.4 133.161 131.675 cv
133.212 131.779 133.179 131.865 133.075 131.917 cv
132.161 132.365 li
132.075 132.417 132.007 132.382 131.955 132.295 cv
131.593 131.675 131.007 131.348 130.422 131.348 cv
130.146 131.348 li
129.112 131.348 128.458 132.038 128.458 133.037 cv
128.458 134.07 129.577 134.536 130.801 135.086 cv
132.093 135.672 133.472 136.448 133.472 138.48 cv
133.472 140.169 132.3 141.357 130.422 141.357 cv
f
139.156 141.357 mo
138.416 141.357 li
137.519 141.357 136.899 141.133 136.451 140.772 cv
136.124 140.513 135.883 140.186 135.693 139.824 cv
135.641 139.721 135.659 139.634 135.761 139.583 cv
136.658 139.118 li
136.761 139.066 136.847 139.1 136.899 139.204 cv
137.244 139.841 137.83 140.169 138.416 140.169 cv
139.156 140.169 li
140.086 140.169 140.861 139.428 140.861 138.48 cv
140.861 137.326 139.81 136.827 138.656 136.31 cv
137.33 135.707 135.831 135.035 135.831 133.037 cv
135.831 131.382 137.054 130.16 138.881 130.16 cv
139.156 130.16 li
140.172 130.16 140.861 130.47 141.326 130.918 cv
141.568 131.142 141.74 131.4 141.894 131.675 cv
141.947 131.779 141.912 131.865 141.808 131.917 cv
140.896 132.365 li
140.81 132.417 140.741 132.382 140.689 132.295 cv
140.328 131.675 139.742 131.348 139.156 131.348 cv
138.881 131.348 li
137.846 131.348 137.192 132.038 137.192 133.037 cv
137.192 134.07 138.312 134.536 139.535 135.086 cv
140.827 135.672 142.205 136.448 142.205 138.48 cv
142.205 140.169 141.033 141.357 139.156 141.357 cv
f
154.917 141.185 mo
153.952 141.185 li
153.9 141.185 153.831 141.151 153.798 141.099 cv
149.87 133.967 li
149.749 133.76 149.61 133.398 149.542 133.157 cv
149.49 133.157 li
149.524 133.778 149.542 135.535 149.542 137.361 cv
149.542 141.013 li
149.542 141.133 149.49 141.185 149.37 141.185 cv
148.37 141.185 li
148.25 141.185 148.198 141.133 148.198 141.013 cv
148.198 130.504 li
148.198 130.383 148.25 130.331 148.37 130.331 cv
149.318 130.331 li
149.388 130.331 149.438 130.367 149.474 130.418 cv
153.401 137.602 li
153.487 137.757 153.642 138.119 153.711 138.342 cv
153.763 138.342 li
153.745 137.636 153.729 135.569 153.729 134.208 cv
153.729 130.504 li
153.729 130.383 153.78 130.331 153.9 130.331 cv
154.917 130.331 li
155.038 130.331 155.089 130.383 155.089 130.504 cv
155.089 141.013 li
155.089 141.133 155.038 141.185 154.917 141.185 cv
f
161.308 133.398 mo
161.154 132.778 161.067 132.158 161.067 132.158 cv
161.015 132.158 li
161.015 132.158 160.929 132.761 160.757 133.398 cv
159.723 137.223 li
159.689 137.343 159.74 137.447 159.896 137.447 cv
162.118 137.447 li
162.273 137.447 162.325 137.343 162.29 137.223 cv
cp
164.65 141.185 mo
163.565 141.185 li
163.478 141.185 163.41 141.151 163.392 141.065 cv
162.738 138.739 li
162.72 138.653 162.652 138.635 162.566 138.635 cv
159.464 138.635 li
159.378 138.635 159.31 138.653 159.292 138.739 cv
158.638 141.065 li
158.62 141.151 158.552 141.185 158.466 141.185 cv
157.466 141.185 li
157.312 141.185 157.259 141.099 157.294 140.961 cv
160.498 130.453 li
160.515 130.367 160.584 130.332 160.671 130.332 cv
161.463 130.332 li
161.549 130.332 161.619 130.367 161.635 130.453 cv
164.822 140.961 li
164.857 141.099 164.805 141.185 164.65 141.185 cv
f
171.144 131.521 mo
169.111 131.521 li
168.991 131.521 168.939 131.573 168.939 131.693 cv
168.939 141.013 li
168.939 141.133 168.887 141.185 168.767 141.185 cv
167.749 141.185 li
167.629 141.185 167.578 141.133 167.578 141.013 cv
167.578 131.693 li
167.578 131.573 167.527 131.521 167.406 131.521 cv
165.373 131.521 li
165.252 131.521 165.201 131.469 165.201 131.348 cv
165.201 130.504 li
165.201 130.383 165.252 130.332 165.373 130.332 cv
171.144 130.332 li
171.265 130.332 171.316 130.383 171.316 130.504 cv
171.316 131.348 li
171.316 131.469 171.265 131.521 171.144 131.521 cv
f
174.64 141.185 mo
173.641 141.185 li
173.521 141.185 173.468 141.133 173.468 141.013 cv
173.468 130.504 li
173.468 130.383 173.521 130.331 173.641 130.331 cv
174.64 130.331 li
174.761 130.331 174.812 130.383 174.812 130.504 cv
174.812 141.013 li
174.812 141.133 174.761 141.185 174.64 141.185 cv
f
182.738 133.036 mo
182.738 132.105 181.979 131.348 181.049 131.348 cv
180.515 131.348 li
179.585 131.348 178.827 132.089 178.827 133.036 cv
178.827 138.479 li
178.827 139.392 179.568 140.168 180.515 140.168 cv
181.049 140.168 li
181.963 140.168 182.738 139.41 182.738 138.479 cv
cp
181.049 141.356 mo
180.515 141.356 li
178.654 141.356 177.466 140.185 177.466 138.479 cv
177.466 133.036 li
177.466 131.348 178.654 130.159 180.515 130.159 cv
181.049 130.159 li
182.91 130.159 184.098 131.331 184.098 133.036 cv
184.098 138.479 li
184.098 140.168 182.91 141.356 181.049 141.356 cv
f
193.488 141.185 mo
192.523 141.185 li
192.47 141.185 192.402 141.151 192.368 141.099 cv
188.44 133.967 li
188.32 133.76 188.181 133.398 188.113 133.157 cv
188.06 133.157 li
188.095 133.778 188.113 135.535 188.113 137.361 cv
188.113 141.013 li
188.113 141.133 188.06 141.185 187.941 141.185 cv
186.941 141.185 li
186.82 141.185 186.769 141.133 186.769 141.013 cv
186.769 130.504 li
186.769 130.383 186.82 130.331 186.941 130.331 cv
187.888 130.331 li
187.958 130.331 188.009 130.367 188.044 130.418 cv
191.971 137.602 li
192.058 137.757 192.213 138.119 192.281 138.342 cv
192.334 138.342 li
192.316 137.636 192.299 135.569 192.299 134.208 cv
192.299 130.504 li
192.299 130.383 192.351 130.331 192.47 130.331 cv
193.488 130.331 li
193.608 130.331 193.66 130.383 193.66 130.504 cv
193.66 141.013 li
193.66 141.133 193.608 141.185 193.488 141.185 cv
f
199.878 133.398 mo
199.723 132.778 199.636 132.158 199.636 132.158 cv
199.585 132.158 li
199.585 132.158 199.499 132.761 199.326 133.398 cv
198.292 137.223 li
198.259 137.343 198.31 137.447 198.465 137.447 cv
200.687 137.447 li
200.843 137.447 200.894 137.343 200.859 137.223 cv
cp
203.22 141.185 mo
202.134 141.185 li
202.048 141.185 201.98 141.151 201.962 141.065 cv
201.308 138.739 li
201.29 138.653 201.222 138.635 201.136 138.635 cv
198.034 138.635 li
197.948 138.635 197.879 138.653 197.862 138.739 cv
197.207 141.065 li
197.19 141.151 197.121 141.185 197.035 141.185 cv
196.036 141.185 li
195.881 141.185 195.829 141.099 195.864 140.961 cv
199.067 130.453 li
199.085 130.367 199.153 130.332 199.24 130.332 cv
200.032 130.332 li
200.118 130.332 200.188 130.367 200.204 130.453 cv
203.392 140.961 li
203.427 141.099 203.374 141.185 203.22 141.185 cv
f
211.505 141.185 mo
205.751 141.185 li
205.63 141.185 205.579 141.133 205.579 141.013 cv
205.579 130.504 li
205.579 130.383 205.63 130.331 205.751 130.331 cv
206.751 130.331 li
206.87 130.331 206.923 130.383 206.923 130.504 cv
206.923 139.824 li
206.923 139.945 206.974 139.997 207.095 139.997 cv
211.505 139.997 li
211.626 139.997 211.677 140.048 211.677 140.168 cv
211.677 141.013 li
211.677 141.133 211.626 141.185 211.505 141.185 cv
f
222.426 140.616 mo
221.961 141.047 221.289 141.356 220.29 141.356 cv
219.756 141.356 li
217.896 141.356 216.706 140.185 216.706 138.479 cv
216.706 133.036 li
216.706 131.347 217.896 130.159 219.756 130.159 cv
220.29 130.159 li
221.221 130.159 221.858 130.418 222.322 130.797 cv
222.633 131.054 222.858 131.347 223.03 131.675 cv
223.08 131.778 223.047 131.864 222.944 131.916 cv
222.03 132.364 li
221.944 132.416 221.875 132.382 221.823 132.295 cv
221.461 131.692 220.859 131.347 220.29 131.347 cv
219.756 131.347 li
218.825 131.347 218.068 132.089 218.068 133.036 cv
218.068 138.479 li
218.068 139.392 218.808 140.168 219.756 140.168 cv
220.29 140.168 li
220.875 140.168 221.461 139.823 221.823 139.186 cv
221.875 139.099 221.961 139.065 222.047 139.117 cv
222.96 139.582 li
223.064 139.634 223.08 139.703 223.03 139.806 cv
222.874 140.099 222.685 140.375 222.426 140.616 cv
f
231.333 141.185 mo
225.578 141.185 li
225.458 141.185 225.406 141.133 225.406 141.013 cv
225.406 130.504 li
225.406 130.383 225.458 130.331 225.578 130.331 cv
231.333 130.331 li
231.453 130.331 231.505 130.383 231.505 130.504 cv
231.505 131.348 li
231.505 131.469 231.453 131.521 231.333 131.521 cv
226.923 131.521 li
226.801 131.521 226.751 131.573 226.751 131.693 cv
226.751 134.914 li
226.751 135.035 226.801 135.086 226.923 135.086 cv
230.539 135.086 li
230.66 135.086 230.712 135.138 230.712 135.259 cv
230.712 136.103 li
230.712 136.224 230.66 136.275 230.539 136.275 cv
226.923 136.275 li
226.801 136.275 226.751 136.327 226.751 136.448 cv
226.751 139.824 li
226.751 139.945 226.801 139.997 226.923 139.997 cv
231.333 139.997 li
231.453 139.997 231.505 140.048 231.505 140.168 cv
231.505 141.013 li
231.505 141.133 231.453 141.185 231.333 141.185 cv
f
240.618 141.185 mo
239.653 141.185 li
239.601 141.185 239.532 141.151 239.499 141.099 cv
235.571 133.967 li
235.45 133.76 235.311 133.398 235.243 133.157 cv
235.191 133.157 li
235.225 133.778 235.243 135.535 235.243 137.361 cv
235.243 141.013 li
235.243 141.133 235.191 141.185 235.071 141.185 cv
234.071 141.185 li
233.951 141.185 233.899 141.133 233.899 141.013 cv
233.899 130.504 li
233.899 130.383 233.951 130.331 234.071 130.331 cv
235.019 130.331 li
235.089 130.331 235.139 130.367 235.175 130.418 cv
239.102 137.602 li
239.188 137.757 239.343 138.119 239.412 138.342 cv
239.464 138.342 li
239.446 137.636 239.43 135.569 239.43 134.208 cv
239.43 130.504 li
239.43 130.383 239.481 130.331 239.601 130.331 cv
240.618 130.331 li
240.739 130.331 240.79 130.383 240.79 130.504 cv
240.79 141.013 li
240.79 141.133 240.739 141.185 240.618 141.185 cv
f
248.904 131.521 mo
246.872 131.521 li
246.751 131.521 246.699 131.573 246.699 131.693 cv
246.699 141.013 li
246.699 141.133 246.647 141.185 246.526 141.185 cv
245.51 141.185 li
245.389 141.185 245.339 141.133 245.339 141.013 cv
245.339 131.693 li
245.339 131.573 245.286 131.521 245.166 131.521 cv
243.133 131.521 li
243.012 131.521 242.961 131.469 242.961 131.348 cv
242.961 130.504 li
242.961 130.383 243.012 130.332 243.133 130.332 cv
248.904 130.332 li
249.024 130.332 249.077 130.383 249.077 130.504 cv
249.077 131.348 li
249.077 131.469 249.024 131.521 248.904 131.521 cv
f
256.5 133.208 mo
256.5 132.295 255.742 131.52 254.795 131.52 cv
252.744 131.52 li
252.623 131.52 252.572 131.572 252.572 131.692 cv
252.572 134.914 li
252.572 135.034 252.623 135.086 252.744 135.086 cv
254.795 135.086 li
255.725 135.086 256.5 134.328 256.5 133.381 cv
cp
257.74 141.185 mo
256.604 141.185 li
256.534 141.185 256.465 141.133 256.448 141.064 cv
254.828 136.378 li
254.812 136.31 254.76 136.274 254.691 136.274 cv
252.744 136.274 li
252.623 136.274 252.572 136.326 252.572 136.447 cv
252.572 141.013 li
252.572 141.133 252.52 141.185 252.4 141.185 cv
251.4 141.185 li
251.279 141.185 251.229 141.133 251.229 141.013 cv
251.229 130.504 li
251.229 130.383 251.279 130.331 251.4 130.331 cv
254.795 130.331 li
256.654 130.331 257.844 131.52 257.844 133.381 cv
257.844 133.553 li
257.844 134.449 257.033 135.534 256.275 135.861 cv
256.189 135.896 256.155 135.965 256.189 136.051 cv
257.895 140.961 li
257.947 141.099 257.895 141.185 257.74 141.185 cv
f
266.268 141.185 mo
260.514 141.185 li
260.393 141.185 260.341 141.133 260.341 141.013 cv
260.341 130.504 li
260.341 130.383 260.393 130.331 260.514 130.331 cv
266.268 130.331 li
266.388 130.331 266.44 130.383 266.44 130.504 cv
266.44 131.348 li
266.44 131.469 266.388 131.521 266.268 131.521 cv
261.858 131.521 li
261.737 131.521 261.685 131.573 261.685 131.693 cv
261.685 134.914 li
261.685 135.035 261.737 135.086 261.858 135.086 cv
265.475 135.086 li
265.596 135.086 265.647 135.138 265.647 135.259 cv
265.647 136.103 li
265.647 136.224 265.596 136.275 265.475 136.275 cv
261.858 136.275 li
261.737 136.275 261.685 136.327 261.685 136.448 cv
261.685 139.824 li
261.685 139.945 261.737 139.997 261.858 139.997 cv
266.268 139.997 li
266.388 139.997 266.44 140.048 266.44 140.168 cv
266.44 141.013 li
266.44 141.133 266.388 141.185 266.268 141.185 cv
f
106.65 150.004 mo
106.65 149.073 105.892 148.316 104.962 148.316 cv
104.427 148.316 li
103.498 148.316 102.74 149.057 102.74 150.004 cv
102.74 155.447 li
102.74 156.36 103.48 157.136 104.427 157.136 cv
104.962 157.136 li
105.875 157.136 106.65 156.378 106.65 155.447 cv
cp
104.962 158.324 mo
104.427 158.324 li
102.567 158.324 101.379 157.153 101.379 155.447 cv
101.379 150.004 li
101.379 148.316 102.567 147.127 104.427 147.127 cv
104.962 147.127 li
106.822 147.127 108.011 148.299 108.011 150.004 cv
108.011 155.447 li
108.011 157.136 106.822 158.324 104.962 158.324 cv
f
116.572 148.488 mo
112.162 148.488 li
112.041 148.488 111.99 148.54 111.99 148.66 cv
111.99 151.882 li
111.99 152.003 112.041 152.053 112.162 152.053 cv
115.779 152.053 li
115.9 152.053 115.952 152.105 115.952 152.227 cv
115.952 153.07 li
115.952 153.191 115.9 153.242 115.779 153.242 cv
112.162 153.242 li
112.041 153.242 111.99 153.294 111.99 153.415 cv
111.99 157.98 li
111.99 158.1 111.937 158.152 111.818 158.152 cv
110.818 158.152 li
110.697 158.152 110.646 158.1 110.646 157.98 cv
110.646 147.471 li
110.646 147.35 110.697 147.299 110.818 147.299 cv
116.572 147.299 li
116.693 147.299 116.744 147.35 116.744 147.471 cv
116.744 148.316 li
116.744 148.436 116.693 148.488 116.572 148.488 cv
f
127.408 157.584 mo
126.942 158.015 126.27 158.324 125.271 158.324 cv
124.737 158.324 li
122.877 158.324 121.687 157.153 121.687 155.447 cv
121.687 150.004 li
121.687 148.315 122.877 147.127 124.737 147.127 cv
125.271 147.127 li
126.201 147.127 126.839 147.386 127.304 147.765 cv
127.614 148.022 127.838 148.315 128.01 148.643 cv
128.062 148.746 128.027 148.832 127.924 148.884 cv
127.012 149.332 li
126.926 149.384 126.856 149.35 126.804 149.263 cv
126.443 148.66 125.84 148.315 125.271 148.315 cv
124.737 148.315 li
123.806 148.315 123.049 149.057 123.049 150.004 cv
123.049 155.447 li
123.049 156.36 123.789 157.136 124.737 157.136 cv
125.271 157.136 li
125.857 157.136 126.443 156.791 126.804 156.154 cv
126.856 156.067 126.942 156.033 127.028 156.085 cv
127.941 156.55 li
128.045 156.602 128.062 156.671 128.01 156.774 cv
127.855 157.067 127.666 157.343 127.408 157.584 cv
f
135.486 150.004 mo
135.486 149.073 134.728 148.316 133.798 148.316 cv
133.263 148.316 li
132.334 148.316 131.576 149.057 131.576 150.004 cv
131.576 155.447 li
131.576 156.36 132.316 157.136 133.263 157.136 cv
133.798 157.136 li
134.711 157.136 135.486 156.378 135.486 155.447 cv
cp
133.798 158.324 mo
133.263 158.324 li
131.403 158.324 130.215 157.153 130.215 155.447 cv
130.215 150.004 li
130.215 148.316 131.403 147.127 133.263 147.127 cv
133.798 147.127 li
135.658 147.127 136.847 148.299 136.847 150.004 cv
136.847 155.447 li
136.847 157.136 135.658 158.324 133.798 158.324 cv
f
147.786 158.153 mo
146.787 158.153 li
146.666 158.153 146.615 158.101 146.615 157.981 cv
146.615 154.432 li
146.615 152.796 146.683 151.314 146.769 150.435 cv
146.701 150.418 li
146.632 150.676 146.442 151.245 146.269 151.624 cv
144.099 156.465 li
144.064 156.534 144.014 156.568 143.944 156.568 cv
143.479 156.568 li
143.41 156.568 143.359 156.534 143.324 156.465 cv
141.171 151.624 li
141.015 151.279 140.826 150.762 140.74 150.418 cv
140.672 150.435 li
140.774 151.348 140.826 152.76 140.826 154.432 cv
140.826 157.981 li
140.826 158.101 140.774 158.153 140.654 158.153 cv
139.654 158.153 li
139.534 158.153 139.482 158.101 139.482 157.981 cv
139.482 147.472 li
139.482 147.351 139.534 147.299 139.654 147.299 cv
140.602 147.299 li
140.672 147.299 140.723 147.335 140.758 147.403 cv
143.462 153.76 li
143.514 153.863 143.651 154.311 143.685 154.449 cv
143.738 154.449 li
143.771 154.311 143.928 153.881 143.978 153.76 cv
146.683 147.403 li
146.719 147.335 146.769 147.299 146.838 147.299 cv
147.786 147.299 li
147.906 147.299 147.959 147.351 147.959 147.472 cv
147.959 157.981 li
147.959 158.101 147.906 158.153 147.786 158.153 cv
f
156.071 150.176 mo
156.071 149.263 155.313 148.488 154.366 148.488 cv
152.316 148.488 li
152.195 148.488 152.143 148.54 152.143 148.66 cv
152.143 151.882 li
152.143 152.002 152.195 152.054 152.316 152.054 cv
154.366 152.054 li
155.297 152.054 156.071 151.296 156.071 150.349 cv
cp
154.366 153.242 mo
152.316 153.242 li
152.195 153.242 152.143 153.294 152.143 153.415 cv
152.143 157.981 li
152.143 158.101 152.092 158.153 151.97 158.153 cv
150.972 158.153 li
150.851 158.153 150.8 158.101 150.8 157.981 cv
150.8 147.472 li
150.8 147.351 150.851 147.299 150.972 147.299 cv
154.366 147.299 li
156.226 147.299 157.415 148.505 157.415 150.349 cv
157.415 151.986 156.226 153.242 154.366 153.242 cv
f
165.511 158.153 mo
159.757 158.153 li
159.636 158.153 159.584 158.101 159.584 157.981 cv
159.584 147.472 li
159.584 147.351 159.636 147.299 159.757 147.299 cv
165.511 147.299 li
165.631 147.299 165.683 147.351 165.683 147.472 cv
165.683 148.316 li
165.683 148.437 165.631 148.489 165.511 148.489 cv
161.101 148.489 li
160.98 148.489 160.928 148.541 160.928 148.661 cv
160.928 151.882 li
160.928 152.003 160.98 152.054 161.101 152.054 cv
164.718 152.054 li
164.839 152.054 164.89 152.106 164.89 152.227 cv
164.89 153.071 li
164.89 153.191 164.839 153.243 164.718 153.243 cv
161.101 153.243 li
160.98 153.243 160.928 153.295 160.928 153.416 cv
160.928 156.792 li
160.928 156.913 160.98 156.965 161.101 156.965 cv
165.511 156.965 li
165.631 156.965 165.683 157.016 165.683 157.136 cv
165.683 157.981 li
165.683 158.101 165.631 158.153 165.511 158.153 cv
f
173.382 148.488 mo
171.35 148.488 li
171.23 148.488 171.177 148.54 171.177 148.66 cv
171.177 157.98 li
171.177 158.1 171.126 158.152 171.005 158.152 cv
169.988 158.152 li
169.868 158.152 169.816 158.1 169.816 157.98 cv
169.816 148.66 li
169.816 148.54 169.765 148.488 169.644 148.488 cv
167.611 148.488 li
167.491 148.488 167.439 148.436 167.439 148.316 cv
167.439 147.471 li
167.439 147.35 167.491 147.299 167.611 147.299 cv
173.382 147.299 li
173.503 147.299 173.555 147.35 173.555 147.471 cv
173.555 148.316 li
173.555 148.436 173.503 148.488 173.382 148.488 cv
f
181.634 158.153 mo
175.88 158.153 li
175.759 158.153 175.707 158.101 175.707 157.981 cv
175.707 147.472 li
175.707 147.351 175.759 147.299 175.88 147.299 cv
181.634 147.299 li
181.754 147.299 181.806 147.351 181.806 147.472 cv
181.806 148.316 li
181.806 148.437 181.754 148.489 181.634 148.489 cv
177.224 148.489 li
177.103 148.489 177.051 148.541 177.051 148.661 cv
177.051 151.882 li
177.051 152.003 177.103 152.054 177.224 152.054 cv
180.841 152.054 li
180.962 152.054 181.013 152.106 181.013 152.227 cv
181.013 153.071 li
181.013 153.191 180.962 153.243 180.841 153.243 cv
177.224 153.243 li
177.103 153.243 177.051 153.295 177.051 153.416 cv
177.051 156.792 li
177.051 156.913 177.103 156.965 177.224 156.965 cv
181.634 156.965 li
181.754 156.965 181.806 157.016 181.806 157.136 cv
181.806 157.981 li
181.806 158.101 181.754 158.153 181.634 158.153 cv
f
190.971 158.153 mo
190.006 158.153 li
189.954 158.153 189.886 158.119 189.851 158.067 cv
185.923 150.935 li
185.803 150.728 185.665 150.366 185.596 150.125 cv
185.544 150.125 li
185.579 150.746 185.596 152.503 185.596 154.329 cv
185.596 157.981 li
185.596 158.101 185.544 158.153 185.423 158.153 cv
184.425 158.153 li
184.304 158.153 184.252 158.101 184.252 157.981 cv
184.252 147.472 li
184.252 147.351 184.304 147.299 184.425 147.299 cv
185.372 147.299 li
185.441 147.299 185.493 147.335 185.527 147.386 cv
189.454 154.57 li
189.541 154.725 189.697 155.087 189.765 155.31 cv
189.817 155.31 li
189.8 154.604 189.783 152.537 189.783 151.176 cv
189.783 147.472 li
189.783 147.351 189.833 147.299 189.954 147.299 cv
190.971 147.299 li
191.091 147.299 191.144 147.351 191.144 147.472 cv
191.144 157.981 li
191.144 158.101 191.091 158.153 190.971 158.153 cv
f
199.533 157.584 mo
199.068 158.015 198.396 158.324 197.396 158.324 cv
196.863 158.324 li
195.002 158.324 193.813 157.153 193.813 155.447 cv
193.813 150.004 li
193.813 148.315 195.002 147.127 196.863 147.127 cv
197.396 147.127 li
198.327 147.127 198.965 147.386 199.429 147.765 cv
199.74 148.022 199.964 148.315 200.136 148.643 cv
200.187 148.746 200.153 148.832 200.05 148.884 cv
199.137 149.332 li
199.051 149.384 198.982 149.35 198.929 149.263 cv
198.568 148.66 197.965 148.315 197.396 148.315 cv
196.863 148.315 li
195.932 148.315 195.174 149.057 195.174 150.004 cv
195.174 155.447 li
195.174 156.36 195.915 157.136 196.863 157.136 cv
197.396 157.136 li
197.982 157.136 198.568 156.791 198.929 156.154 cv
198.982 156.067 199.068 156.033 199.154 156.085 cv
200.066 156.55 li
200.17 156.602 200.187 156.671 200.136 156.774 cv
199.98 157.067 199.791 157.343 199.533 157.584 cv
f
208.456 158.153 mo
202.702 158.153 li
202.582 158.153 202.529 158.101 202.529 157.981 cv
202.529 147.472 li
202.529 147.351 202.582 147.299 202.702 147.299 cv
208.456 147.299 li
208.576 147.299 208.629 147.351 208.629 147.472 cv
208.629 148.316 li
208.629 148.437 208.576 148.489 208.456 148.489 cv
204.046 148.489 li
203.926 148.489 203.873 148.541 203.873 148.661 cv
203.873 151.882 li
203.873 152.003 203.926 152.054 204.046 152.054 cv
207.664 152.054 li
207.784 152.054 207.836 152.106 207.836 152.227 cv
207.836 153.071 li
207.836 153.191 207.784 153.243 207.664 153.243 cv
204.046 153.243 li
203.926 153.243 203.873 153.295 203.873 153.416 cv
203.873 156.792 li
203.873 156.913 203.926 156.965 204.046 156.965 cv
208.456 156.965 li
208.576 156.965 208.629 157.016 208.629 157.136 cv
208.629 157.981 li
208.629 158.101 208.576 158.153 208.456 158.153 cv
f
215.501 158.153 mo
214.501 158.153 li
214.38 158.153 214.329 158.101 214.329 157.981 cv
214.329 147.472 li
214.329 147.351 214.38 147.299 214.501 147.299 cv
215.501 147.299 li
215.62 147.299 215.673 147.351 215.673 147.472 cv
215.673 157.981 li
215.673 158.101 215.62 158.153 215.501 158.153 cv
f
225.217 158.153 mo
224.252 158.153 li
224.199 158.153 224.131 158.119 224.097 158.067 cv
220.169 150.935 li
220.049 150.728 219.91 150.366 219.842 150.125 cv
219.789 150.125 li
219.824 150.746 219.842 152.503 219.842 154.329 cv
219.842 157.981 li
219.842 158.101 219.789 158.153 219.669 158.153 cv
218.67 158.153 li
218.55 158.153 218.497 158.101 218.497 157.981 cv
218.497 147.472 li
218.497 147.351 218.55 147.299 218.67 147.299 cv
219.618 147.299 li
219.687 147.299 219.738 147.335 219.773 147.386 cv
223.7 154.57 li
223.787 154.725 223.942 155.087 224.01 155.31 cv
224.063 155.31 li
224.045 154.604 224.028 152.537 224.028 151.176 cv
224.028 147.472 li
224.028 147.351 224.08 147.299 224.199 147.299 cv
225.217 147.299 li
225.337 147.299 225.389 147.351 225.389 147.472 cv
225.389 157.981 li
225.389 158.101 225.337 158.153 225.217 158.153 cv
f
237.155 150.176 mo
237.155 149.263 236.397 148.488 235.45 148.488 cv
233.399 148.488 li
233.278 148.488 233.227 148.54 233.227 148.66 cv
233.227 151.882 li
233.227 152.002 233.278 152.054 233.399 152.054 cv
235.45 152.054 li
236.38 152.054 237.155 151.296 237.155 150.349 cv
cp
238.395 158.153 mo
237.259 158.153 li
237.189 158.153 237.12 158.101 237.103 158.032 cv
235.483 153.346 li
235.467 153.278 235.415 153.242 235.346 153.242 cv
233.399 153.242 li
233.278 153.242 233.227 153.294 233.227 153.415 cv
233.227 157.981 li
233.227 158.101 233.175 158.153 233.055 158.153 cv
232.055 158.153 li
231.934 158.153 231.884 158.101 231.884 157.981 cv
231.884 147.472 li
231.884 147.351 231.934 147.299 232.055 147.299 cv
235.45 147.299 li
237.309 147.299 238.499 148.488 238.499 150.349 cv
238.499 150.521 li
238.499 151.417 237.688 152.502 236.93 152.829 cv
236.844 152.864 236.81 152.933 236.844 153.019 cv
238.55 157.929 li
238.602 158.067 238.55 158.153 238.395 158.153 cv
f
246.921 158.153 mo
241.167 158.153 li
241.047 158.153 240.994 158.101 240.994 157.981 cv
240.994 147.472 li
240.994 147.351 241.047 147.299 241.167 147.299 cv
246.921 147.299 li
247.041 147.299 247.094 147.351 247.094 147.472 cv
247.094 148.316 li
247.094 148.437 247.041 148.489 246.921 148.489 cv
242.511 148.489 li
242.391 148.489 242.338 148.541 242.338 148.661 cv
242.338 151.882 li
242.338 152.003 242.391 152.054 242.511 152.054 cv
246.129 152.054 li
246.249 152.054 246.301 152.106 246.301 152.227 cv
246.301 153.071 li
246.301 153.191 246.249 153.243 246.129 153.243 cv
242.511 153.243 li
242.391 153.243 242.338 153.295 242.338 153.416 cv
242.338 156.792 li
242.338 156.913 242.391 156.965 242.511 156.965 cv
246.921 156.965 li
247.041 156.965 247.094 157.016 247.094 157.136 cv
247.094 157.981 li
247.094 158.101 247.041 158.153 246.921 158.153 cv
f
252.692 158.324 mo
251.952 158.324 li
251.055 158.324 250.436 158.1 249.988 157.739 cv
249.661 157.48 249.419 157.153 249.229 156.791 cv
249.178 156.688 249.196 156.601 249.298 156.55 cv
250.194 156.085 li
250.297 156.033 250.383 156.067 250.436 156.171 cv
250.78 156.808 251.366 157.136 251.952 157.136 cv
252.692 157.136 li
253.623 157.136 254.398 156.395 254.398 155.447 cv
254.398 154.294 253.346 153.794 252.193 153.277 cv
250.866 152.674 249.368 152.002 249.368 150.004 cv
249.368 148.349 250.59 147.127 252.417 147.127 cv
252.692 147.127 li
253.709 147.127 254.398 147.437 254.863 147.885 cv
255.104 148.109 255.276 148.367 255.431 148.642 cv
255.483 148.746 255.449 148.832 255.345 148.884 cv
254.432 149.332 li
254.346 149.384 254.278 149.349 254.225 149.262 cv
253.864 148.642 253.278 148.315 252.692 148.315 cv
252.417 148.315 li
251.383 148.315 250.729 149.005 250.729 150.004 cv
250.729 151.037 251.848 151.503 253.071 152.053 cv
254.364 152.639 255.742 153.415 255.742 155.447 cv
255.742 157.136 254.57 158.324 252.692 158.324 cv
f
264.182 158.153 mo
258.428 158.153 li
258.307 158.153 258.256 158.101 258.256 157.981 cv
258.256 147.472 li
258.256 147.351 258.307 147.299 258.428 147.299 cv
264.182 147.299 li
264.303 147.299 264.354 147.351 264.354 147.472 cv
264.354 148.316 li
264.354 148.437 264.303 148.489 264.182 148.489 cv
259.772 148.489 li
259.651 148.489 259.6 148.541 259.6 148.661 cv
259.6 151.882 li
259.6 152.003 259.651 152.054 259.772 152.054 cv
263.389 152.054 li
263.51 152.054 263.562 152.106 263.562 152.227 cv
263.562 153.071 li
263.562 153.191 263.51 153.243 263.389 153.243 cv
259.772 153.243 li
259.651 153.243 259.6 153.295 259.6 153.416 cv
259.6 156.792 li
259.6 156.913 259.651 156.965 259.772 156.965 cv
264.182 156.965 li
264.303 156.965 264.354 157.016 264.354 157.136 cv
264.354 157.981 li
264.354 158.101 264.303 158.153 264.182 158.153 cv
f
270.159 150.365 mo
270.005 149.745 269.919 149.125 269.919 149.125 cv
269.866 149.125 li
269.866 149.125 269.78 149.728 269.608 150.365 cv
268.575 154.19 li
268.54 154.31 268.592 154.414 268.747 154.414 cv
270.97 154.414 li
271.124 154.414 271.177 154.31 271.141 154.19 cv
cp
273.502 158.152 mo
272.417 158.152 li
272.331 158.152 272.261 158.118 272.244 158.032 cv
271.589 155.706 li
271.572 155.62 271.503 155.602 271.417 155.602 cv
268.316 155.602 li
268.23 155.602 268.161 155.62 268.143 155.706 cv
267.489 158.032 li
267.471 158.118 267.403 158.152 267.317 158.152 cv
266.317 158.152 li
266.163 158.152 266.111 158.066 266.145 157.928 cv
269.35 147.42 li
269.367 147.334 269.436 147.299 269.522 147.299 cv
270.315 147.299 li
270.401 147.299 270.47 147.334 270.487 147.42 cv
273.674 157.928 li
273.708 158.066 273.657 158.152 273.502 158.152 cv
f
281.132 150.176 mo
281.132 149.263 280.374 148.488 279.427 148.488 cv
277.377 148.488 li
277.256 148.488 277.204 148.54 277.204 148.66 cv
277.204 151.882 li
277.204 152.002 277.256 152.054 277.377 152.054 cv
279.427 152.054 li
280.358 152.054 281.132 151.296 281.132 150.349 cv
cp
282.373 158.153 mo
281.236 158.153 li
281.166 158.153 281.098 158.101 281.08 158.032 cv
279.461 153.346 li
279.444 153.278 279.393 153.242 279.323 153.242 cv
277.377 153.242 li
277.256 153.242 277.204 153.294 277.204 153.415 cv
277.204 157.981 li
277.204 158.101 277.153 158.153 277.031 158.153 cv
276.033 158.153 li
275.912 158.153 275.861 158.101 275.861 157.981 cv
275.861 147.472 li
275.861 147.351 275.912 147.299 276.033 147.299 cv
279.427 147.299 li
281.287 147.299 282.476 148.488 282.476 150.349 cv
282.476 150.521 li
282.476 151.417 281.666 152.502 280.908 152.829 cv
280.822 152.864 280.787 152.933 280.822 153.019 cv
282.528 157.929 li
282.579 158.067 282.528 158.153 282.373 158.153 cv
f
290.555 157.584 mo
290.09 158.015 289.418 158.324 288.419 158.324 cv
287.885 158.324 li
286.025 158.324 284.836 157.153 284.836 155.447 cv
284.836 150.004 li
284.836 148.315 286.025 147.127 287.885 147.127 cv
288.419 147.127 li
289.35 147.127 289.987 147.386 290.451 147.765 cv
290.762 148.022 290.987 148.315 291.159 148.643 cv
291.209 148.746 291.176 148.832 291.073 148.884 cv
290.159 149.332 li
290.073 149.384 290.004 149.35 289.952 149.263 cv
289.59 148.66 288.988 148.315 288.419 148.315 cv
287.885 148.315 li
286.955 148.315 286.197 149.057 286.197 150.004 cv
286.197 155.447 li
286.197 156.36 286.938 157.136 287.885 157.136 cv
288.419 157.136 li
289.004 157.136 289.59 156.791 289.952 156.154 cv
290.004 156.067 290.09 156.033 290.176 156.085 cv
291.089 156.55 li
291.193 156.602 291.209 156.671 291.159 156.774 cv
291.003 157.067 290.814 157.343 290.555 157.584 cv
f
300.253 158.153 mo
299.236 158.153 li
299.115 158.153 299.065 158.101 299.065 157.981 cv
299.065 153.416 li
299.065 153.295 299.013 153.243 298.893 153.243 cv
295.051 153.243 li
294.93 153.243 294.878 153.295 294.878 153.416 cv
294.878 157.981 li
294.878 158.101 294.826 158.153 294.705 158.153 cv
293.707 158.153 li
293.586 158.153 293.534 158.101 293.534 157.981 cv
293.534 147.472 li
293.534 147.351 293.586 147.299 293.707 147.299 cv
294.705 147.299 li
294.826 147.299 294.878 147.351 294.878 147.472 cv
294.878 151.882 li
294.878 152.003 294.93 152.054 295.051 152.054 cv
298.893 152.054 li
299.013 152.054 299.065 152.003 299.065 151.882 cv
299.065 147.472 li
299.065 147.351 299.115 147.299 299.236 147.299 cv
300.253 147.299 li
300.373 147.299 300.426 147.351 300.426 147.472 cv
300.426 157.981 li
300.426 158.101 300.373 158.153 300.253 158.153 cv
f
301.235 121.935 mo
101.785 121.935 li
101.785 120.648 li
301.235 120.648 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
